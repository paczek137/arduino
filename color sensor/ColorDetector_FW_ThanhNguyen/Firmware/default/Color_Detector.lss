
Color_Detector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002066  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b0  00800060  00002066  000020fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800210  00800210  000022aa  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  000022aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000419  00000000  00000000  0000240a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002948  00000000  00000000  00002823  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011b7  00000000  00000000  0000516b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c30  00000000  00000000  00006322  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a0  00000000  00000000  00007f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000559  00000000  00000000  000082f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000159e  00000000  00000000  0000884d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00009deb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__ctors_end>
       4:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
       8:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
       c:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      10:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      14:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      18:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      1c:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      20:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      24:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      28:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      2c:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__vector_11>
      30:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      34:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      38:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      3c:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      40:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      44:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      48:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      4c:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>
      50:	0c 94 9b 03 	jmp	0x736	; 0x736 <__bad_interrupt>

00000054 <hiGLCD>:
      54:	00 f8 f8 78 c0 80 c0 70 f8 f8 00 08 f8 f8 88 88     ...x...p........
      64:	f8 70 20 78 c8 88 98 18 00 00 00 00 f8 f8 08 00     .p x............
      74:	00 00 00 00 c0 78 78 e0 00 00 00 f8 f8 88 88 d8     .....xx.........
      84:	78 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     x...............
	...
      d4:	00 0f 0f 00 03 03 01 08 0f 0f 00 08 0f 0f 08 00     ................
      e4:	00 00 0c 0c 08 08 0f 07 00 00 00 00 0f 0f 08 08     ................
      f4:	08 0c 08 0e 0b 01 01 0f 0f 08 08 0f 0f 08 08 0d     ................
     104:	07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     168:	00 c0 f8 1c 04 04 0c 0c 80 c0 60 20 60 e0 80 04     ..........` `...
     178:	fc fc 00 80 c0 60 20 60 e0 80 20 e0 60 20 60 00     .....` `.. .` `.
     188:	00 00 00 fc fc 04 04 0c 1c f8 00 80 e0 a0 a0 e0     ................
     198:	c0 20 f8 20 20 80 e0 a0 a0 e0 c0 00 c0 60 20 60     . .  ........` `
     1a8:	60 20 f8 20 20 80 c0 60 20 60 e0 80 20 e0 60 20     ` .  ..` `.. .` 
     1b8:	60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
     1d8:	00 00 00 80 40 20 20 20 20 20 20 20 20 20 20 20     ....@           
     1e8:	20 20 43 46 84 84 06 06 01 07 06 04 06 03 01 00       CF............
     1f8:	07 07 00 01 07 06 04 06 03 01 04 07 04 00 00 00     ................
     208:	00 00 00 07 07 04 04 06 03 03 00 01 07 04 04 06     ................
     218:	02 00 07 04 06 03 07 04 04 06 02 00 07 06 04 04     ................
     228:	02 00 07 04 06 03 07 06 04 06 03 01 04 07 04 00     ................
	...
     254:	c0 20 10 08 04 82 41 20 20 e0 e0 e0 40 80 00 00     . ....A  ...@...
     264:	00 00 80 40 20 20 20 a0 e0 e1 c1 82 02 04 08 10     ...@   .........
     274:	20 40 80 00 00 00 00 00 00 80 80 80 80 80 80 80      @..............
     284:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     294:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     2a4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     2b4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     2c4:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 00     ................
     2d4:	ff 00 00 00 07 08 10 10 10 11 11 11 08 07 00 00     ................
     2e4:	00 00 07 08 10 10 10 10 11 11 08 07 00 00 00 00     ................
     2f4:	00 00 ff 00 00 00 00 00 00 03 03 03 03 03 03 03     ................
     304:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
     314:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
     324:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
     334:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
     344:	03 03 03 03 03 03 03 00 00 00 00 00 00 00 00 00     ................
     354:	7f c0 80 00 00 00 00 00 06 08 10 20 40 40 40 40     ........... @@@@
     364:	40 40 40 40 20 18 06 00 00 00 00 00 00 00 00 80     @@@@ ...........
     374:	40 20 1e 00 00 00 00 00 00 00 01 ff 98 08 08 f8     @ ..............
     384:	60 08 78 e8 80 68 18 08 00 00 00 01 83 6f 38 ed     `.x..h.......o8.
     394:	c3 01 08 f8 80 00 88 f8 00 80 d8 48 c8 f8 00 08     ...........H....
     3a4:	f8 f8 08 18 f8 00 00 00 00 03 03 01 ff ff 01 03     ................
     3b4:	03 01 ff 18 08 18 f8 00 80 d8 48 c8 f8 00 08 f8     ..........H.....
     3c4:	f8 08 18 f8 00 01 ff 18 08 18 f8 00 00 00 00 00     ................
     3d4:	00 00 01 02 04 04 08 10 10 20 20 20 20 20 20 20     .........       
     3e4:	20 20 20 20 20 20 20 20 10 10 10 08 04 02 01 00             ........
	...
     3fc:	00 00 00 01 01 01 01 01 00 0c 08 07 03 00 00 00     ................
     40c:	00 00 00 01 01 01 00 01 01 01 00 01 01 01 01 01     ................
     41c:	01 01 01 01 01 01 01 01 01 01 00 01 01 01 00 00     ................
     42c:	00 00 00 01 01 01 01 00 00 01 01 01 00 01 01 01     ................
     43c:	01 01 01 01 01 01 01 01 01 00 01 01 01 01 01 01     ................
     44c:	00 01 01 01 00 00 00 00                             ........

00000454 <font7x8>:
	...
     45c:	06 5f 5f 06 00 00 00 07 07 00 07 07 00 14 7f 7f     .__.............
     46c:	14 7f 7f 14 24 2e 6b 6b 3a 12 00 46 66 30 18 0c     ....$.kk:..Ff0..
     47c:	66 62 30 7a 4f 5d 37 7a 48 04 07 03 00 00 00 00     fb0zO]7zH.......
     48c:	00 1c 3e 63 41 00 00 00 41 63 3e 1c 00 00 08 2a     ..>cA...Ac>....*
     49c:	3e 1c 1c 3e 2a 08 08 3e 3e 08 08 00 00 80 e0 60     >..>*..>>......`
     4ac:	00 00 00 08 08 08 08 08 08 00 00 00 60 60 00 00     ............``..
     4bc:	00 60 30 18 0c 06 03 01 3e 7f 71 59 4d 7f 3e 40     .`0.....>.qYM.>@
     4cc:	42 7f 7f 40 40 00 62 73 59 49 6f 66 00 22 63 49     B..@@.bsYIof."cI
     4dc:	49 7f 36 00 18 1c 16 53 7f 7f 50 27 67 45 45 7d     I.6....S..P'gEE}
     4ec:	39 00 3c 7e 4b 49 79 30 00 03 03 71 79 0f 07 00     9.<~KIy0...qy...
     4fc:	36 7f 49 49 7f 36 00 06 4f 49 69 3f 1e 00 00 00     6.II.6..OIi?....
     50c:	66 66 00 00 00 00 80 e6 66 00 00 00 08 1c 36 63     ff......f.....6c
     51c:	41 00 00 24 24 24 24 24 24 00 00 41 63 36 1c 08     A..$$$$$$..Ac6..
     52c:	00 02 03 51 59 0f 06 00 3e 7f 41 5d 5d 1f 1e 7c     ...QY...>.A]]..|
     53c:	7e 13 13 7e 7c 00 41 7f 7f 49 49 7f 36 1c 3e 63     ~..~|.A..II.6.>c
     54c:	41 41 63 22 41 7f 7f 41 63 3e 1c 41 7f 7f 49 5d     AAc"A..Ac>.A..I]
     55c:	41 63 41 7f 7f 49 1d 01 03 1c 3e 63 41 51 73 72     AcA..I....>cAQsr
     56c:	7f 7f 08 08 7f 7f 00 00 41 7f 7f 41 00 00 30 70     ........A..A..0p
     57c:	40 41 7f 3f 01 41 7f 7f 08 1c 77 63 41 7f 7f 41     @A.?.A....wcA..A
     58c:	40 60 70 7f 7f 0e 1c 0e 7f 7f 7f 7f 06 0c 18 7f     @`p.............
     59c:	7f 1c 3e 63 41 63 3e 1c 41 7f 7f 49 09 0f 06 1e     ..>cAc>.A..I....
     5ac:	3f 21 71 7f 5e 00 41 7f 7f 09 19 7f 66 26 6f 4d     ?!q.^.A.....f&oM
     5bc:	59 73 32 00 03 41 7f 7f 41 03 00 7f 7f 40 40 7f     Ys2..A..A....@@.
     5cc:	7f 00 1f 3f 60 60 3f 1f 00 7f 7f 30 18 30 7f 7f     ...?``?....0.0..
     5dc:	43 67 3c 18 3c 67 43 07 4f 78 78 4f 07 00 47 63     Cg<.<gC.OxxO..Gc
     5ec:	71 59 4d 67 73 00 7f 7f 41 41 00 00 01 03 06 0c     qYMgs...AA......
     5fc:	18 30 60 00 41 41 7f 7f 00 00 08 0c 06 03 06 0c     .0`.AA..........
     60c:	08 80 80 80 80 80 80 80 00 00 03 07 04 00 00 20     ............... 
     61c:	74 54 54 3c 78 40 41 7f 3f 48 48 78 30 38 7c 44     tTT<x@A.?HHx08|D
     62c:	44 6c 28 00 30 78 48 49 3f 7f 40 38 7c 54 54 5c     Dl(.0xHI?.@8|TT\
     63c:	18 00 48 7e 7f 49 03 02 00 38 bc a4 a4 fc 78 00     ..H~.I...8....x.
     64c:	41 7f 7f 08 04 7c 78 00 44 7d 7d 40 00 00 60 e0     A....|x.D}}@..`.
     65c:	80 80 fd 7d 00 41 7f 7f 10 38 6c 44 00 41 7f 7f     ...}.A...8lD.A..
     66c:	40 00 00 78 7c 1c 38 1c 7c 78 7c 7c 04 04 7c 78     @..x|.8.|x||..|x
     67c:	00 38 7c 44 44 7c 38 00 00 fc fc a4 24 3c 18 18     .8|DD|8.....$<..
     68c:	3c 24 a4 f8 fc 84 44 7c 78 4c 04 1c 18 48 5c 54     <$....D|xL...H\T
     69c:	54 74 24 00 00 04 3e 7f 44 24 00 3c 7c 40 40 3c     Tt$...>.D$.<|@@<
     6ac:	7c 40 1c 3c 60 60 3c 1c 00 3c 7c 70 38 70 7c 3c     |@.<``<..<|p8p|<
     6bc:	44 6c 38 10 38 6c 44 3c bc a0 a0 fc 7c 00 4c 64     Dl8.8lD<....|.Ld
     6cc:	74 5c 4c 64 00 08 08 3e 77 41 41 00 00 00 00 77     t\Ld...>wAA....w
     6dc:	77 00 00 41 41 77 3e 08 08 00 02 03 01 03 02 03     w..AAw>.........
     6ec:	01 ff 81 81 81 81 81 ff 0e 9f 91 b1 fb 4a 00 00     .............J..

000006fc <__ctors_end>:
     6fc:	11 24       	eor	r1, r1
     6fe:	1f be       	out	0x3f, r1	; 63
     700:	cf e5       	ldi	r28, 0x5F	; 95
     702:	d8 e0       	ldi	r29, 0x08	; 8
     704:	de bf       	out	0x3e, r29	; 62
     706:	cd bf       	out	0x3d, r28	; 61

00000708 <__do_copy_data>:
     708:	12 e0       	ldi	r17, 0x02	; 2
     70a:	a0 e6       	ldi	r26, 0x60	; 96
     70c:	b0 e0       	ldi	r27, 0x00	; 0
     70e:	e6 e6       	ldi	r30, 0x66	; 102
     710:	f0 e2       	ldi	r31, 0x20	; 32
     712:	02 c0       	rjmp	.+4      	; 0x718 <.do_copy_data_start>

00000714 <.do_copy_data_loop>:
     714:	05 90       	lpm	r0, Z+
     716:	0d 92       	st	X+, r0

00000718 <.do_copy_data_start>:
     718:	a0 31       	cpi	r26, 0x10	; 16
     71a:	b1 07       	cpc	r27, r17
     71c:	d9 f7       	brne	.-10     	; 0x714 <.do_copy_data_loop>

0000071e <__do_clear_bss>:
     71e:	12 e0       	ldi	r17, 0x02	; 2
     720:	a0 e1       	ldi	r26, 0x10	; 16
     722:	b2 e0       	ldi	r27, 0x02	; 2
     724:	01 c0       	rjmp	.+2      	; 0x728 <.do_clear_bss_start>

00000726 <.do_clear_bss_loop>:
     726:	1d 92       	st	X+, r1

00000728 <.do_clear_bss_start>:
     728:	a3 31       	cpi	r26, 0x13	; 19
     72a:	b1 07       	cpc	r27, r17
     72c:	e1 f7       	brne	.-8      	; 0x726 <.do_clear_bss_loop>
     72e:	0e 94 b7 08 	call	0x116e	; 0x116e <main>
     732:	0c 94 31 10 	jmp	0x2062	; 0x2062 <_exit>

00000736 <__bad_interrupt>:
     736:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000073a <GLCD_Delay>:
#define GLCD_XADDRESS	0xB8 //10111xxx: set X (page, line) address
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
     73a:	80 e0       	ldi	r24, 0x00	; 0
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     73c:	00 00       	nop
     73e:	8f 5f       	subi	r24, 0xFF	; 255
     740:	80 31       	cpi	r24, 0x10	; 16
     742:	e1 f7       	brne	.-8      	; 0x73c <GLCD_Delay+0x2>
}						 					 					 		 
     744:	08 95       	ret

00000746 <GLCD_OUT_Set>:
void GLCD_OUT_Set(void){						 					 	
	GLCD_CTRL_DDR |=						 					 		
     746:	87 b3       	in	r24, 0x17	; 23
     748:	8e 63       	ori	r24, 0x3E	; 62
     74a:	87 bb       	out	0x17, r24	; 23
	(1<<GLCD_E)|(1<<GLCD_RW)|(1<<GLCD_RS)|(1<<GLCD_CS1)|(1<<GLCD_CS2);	
	cbi(GLCD_CTRL_O, GLCD_E);	
     74c:	c1 98       	cbi	0x18, 1	; 24
	GLCD_DATA_DDR=0xFF;
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	81 bb       	out	0x11, r24	; 17
	GLCD_DATA_O=0x00;
     752:	12 ba       	out	0x12, r1	; 18
}
     754:	08 95       	ret

00000756 <GLCD_IN_Set>:
void GLCD_IN_Set(void){
	GLCD_CTRL_DDR |=
     756:	87 b3       	in	r24, 0x17	; 23
     758:	8e 63       	ori	r24, 0x3E	; 62
     75a:	87 bb       	out	0x17, r24	; 23
	(1<<GLCD_E)|(1<<GLCD_RW)|(1<<GLCD_RS)|(1<<GLCD_CS1)|(1<<GLCD_CS2);	
	cbi(GLCD_CTRL_O, GLCD_E);	
     75c:	c1 98       	cbi	0x18, 1	; 24
	GLCD_DATA_DDR=0x00;
     75e:	11 ba       	out	0x11, r1	; 17
	GLCD_DATA_O=0xFF; ////pull up resistors
     760:	8f ef       	ldi	r24, 0xFF	; 255
     762:	82 bb       	out	0x12, r24	; 18
}
     764:	08 95       	ret

00000766 <GLCD_SetSide>:
void GLCD_SetSide(char Side){	//Left or right controller
     766:	1f 93       	push	r17
     768:	18 2f       	mov	r17, r24
	GLCD_OUT_Set();
     76a:	0e 94 a3 03 	call	0x746	; 0x746 <GLCD_OUT_Set>
	if(Side==1){ //1:Right
     76e:	11 30       	cpi	r17, 0x01	; 1
     770:	19 f4       	brne	.+6      	; 0x778 <GLCD_SetSide+0x12>
		cbi(GLCD_CTRL_O, GLCD_CS1);
     772:	c5 98       	cbi	0x18, 5	; 24
		sbi(GLCD_CTRL_O, GLCD_CS2);
     774:	c4 9a       	sbi	0x18, 4	; 24
     776:	02 c0       	rjmp	.+4      	; 0x77c <GLCD_SetSide+0x16>
	}
	else{        //0: Left
		sbi(GLCD_CTRL_O, GLCD_CS1);
     778:	c5 9a       	sbi	0x18, 5	; 24
		cbi(GLCD_CTRL_O, GLCD_CS2);
     77a:	c4 98       	cbi	0x18, 4	; 24
     77c:	80 e0       	ldi	r24, 0x00	; 0
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     77e:	00 00       	nop
     780:	8f 5f       	subi	r24, 0xFF	; 255
     782:	80 31       	cpi	r24, 0x10	; 16
     784:	e1 f7       	brne	.-8      	; 0x77e <GLCD_SetSide+0x18>
	else{        //0: Left
		sbi(GLCD_CTRL_O, GLCD_CS1);
		cbi(GLCD_CTRL_O, GLCD_CS2);
	}
	GLCD_Delay();
}
     786:	1f 91       	pop	r17
     788:	08 95       	ret

0000078a <wait_GLCD>:
//*************************END supporting functions**************************

//*************************primary functions of GLCD*************************
//-------------------------For INSTRUCTION---------------------
void wait_GLCD(void){
	GLCD_IN_Set();
     78a:	0e 94 ab 03 	call	0x756	; 0x756 <GLCD_IN_Set>
	cbi(GLCD_CTRL_O, GLCD_RS); //pull both RS down
     78e:	c3 98       	cbi	0x18, 3	; 24
	sbi(GLCD_CTRL_O, GLCD_RW); //pull both RW up, (GLCD->AVR)
     790:	c2 9a       	sbi	0x18, 2	; 24

	GLCD_ENABLE;		   //Pull the EN line up
     792:	c1 9a       	sbi	0x18, 1	; 24
     794:	80 e0       	ldi	r24, 0x00	; 0
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     796:	00 00       	nop
     798:	8f 5f       	subi	r24, 0xFF	; 255
     79a:	80 31       	cpi	r24, 0x10	; 16
     79c:	e1 f7       	brne	.-8      	; 0x796 <wait_GLCD+0xc>
     79e:	06 c0       	rjmp	.+12     	; 0x7ac <wait_GLCD+0x22>
	GLCD_ENABLE;		   //Pull the EN line up
	GLCD_Delay();
	GLCD_DISABLE;
	
	while (bit_is_set(GLCD_DATA_I,GLCD_BUSY)){
		GLCD_ENABLE;		   //Pull the EN line up		
     7a0:	c1 9a       	sbi	0x18, 1	; 24
     7a2:	80 e0       	ldi	r24, 0x00	; 0
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     7a4:	00 00       	nop
     7a6:	8f 5f       	subi	r24, 0xFF	; 255
     7a8:	80 31       	cpi	r24, 0x10	; 16
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <wait_GLCD+0x1a>
	GLCD_DISABLE;
	
	while (bit_is_set(GLCD_DATA_I,GLCD_BUSY)){
		GLCD_ENABLE;		   //Pull the EN line up		
		GLCD_Delay();
		GLCD_DISABLE;		   //Pull the EN line down						
     7ac:	c1 98       	cbi	0x18, 1	; 24

	GLCD_ENABLE;		   //Pull the EN line up
	GLCD_Delay();
	GLCD_DISABLE;
	
	while (bit_is_set(GLCD_DATA_I,GLCD_BUSY)){
     7ae:	87 99       	sbic	0x10, 7	; 16
     7b0:	f7 cf       	rjmp	.-18     	; 0x7a0 <wait_GLCD+0x16>
		GLCD_ENABLE;		   //Pull the EN line up		
		GLCD_Delay();
		GLCD_DISABLE;		   //Pull the EN line down						
	}
}
     7b2:	08 95       	ret

000007b4 <GLCD_SetDISPLAY>:
void GLCD_SetDISPLAY(uint8_t ON){
     7b4:	1f 93       	push	r17
     7b6:	18 2f       	mov	r17, r24
	wait_GLCD();
     7b8:	0e 94 c5 03 	call	0x78a	; 0x78a <wait_GLCD>
	GLCD_OUT_Set();
     7bc:	0e 94 a3 03 	call	0x746	; 0x746 <GLCD_OUT_Set>
	cbi(GLCD_CTRL_O, GLCD_RS); //pull both RS, RW down, (AVR->GLCD)
     7c0:	c3 98       	cbi	0x18, 3	; 24
	cbi(GLCD_CTRL_O, GLCD_RW);
     7c2:	c2 98       	cbi	0x18, 2	; 24
	
	GLCD_DATA_O=GLCD_DISPLAY+ON;
     7c4:	12 5c       	subi	r17, 0xC2	; 194
     7c6:	12 bb       	out	0x12, r17	; 18
	GLCD_ENABLE;		   //Pull the EN line up
     7c8:	c1 9a       	sbi	0x18, 1	; 24
     7ca:	80 e0       	ldi	r24, 0x00	; 0
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     7cc:	00 00       	nop
     7ce:	8f 5f       	subi	r24, 0xFF	; 255
     7d0:	80 31       	cpi	r24, 0x10	; 16
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <GLCD_SetDISPLAY+0x18>
	cbi(GLCD_CTRL_O, GLCD_RW);
	
	GLCD_DATA_O=GLCD_DISPLAY+ON;
	GLCD_ENABLE;		   //Pull the EN line up
	GLCD_Delay();
	GLCD_DISABLE;		   //Pull the EN line down
     7d4:	c1 98       	cbi	0x18, 1	; 24
}
     7d6:	1f 91       	pop	r17
     7d8:	08 95       	ret

000007da <GLCD_SetYADDRESS>:
void GLCD_SetYADDRESS(uint8_t Col){ //set Y address (or column) of GLCD
     7da:	1f 93       	push	r17
     7dc:	18 2f       	mov	r17, r24
	wait_GLCD();
     7de:	0e 94 c5 03 	call	0x78a	; 0x78a <wait_GLCD>
	GLCD_OUT_Set();
     7e2:	0e 94 a3 03 	call	0x746	; 0x746 <GLCD_OUT_Set>
	cbi(GLCD_CTRL_O, GLCD_RS); //pull both RS, RW down, (AVR->GLCD)
     7e6:	c3 98       	cbi	0x18, 3	; 24
	cbi(GLCD_CTRL_O, GLCD_RW);
     7e8:	c2 98       	cbi	0x18, 2	; 24
	
	GLCD_DATA_O=GLCD_YADDRESS+Col;
     7ea:	10 5c       	subi	r17, 0xC0	; 192
     7ec:	12 bb       	out	0x12, r17	; 18
	GLCD_ENABLE;		   //Pull the EN line up	
     7ee:	c1 9a       	sbi	0x18, 1	; 24
     7f0:	80 e0       	ldi	r24, 0x00	; 0
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     7f2:	00 00       	nop
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	80 31       	cpi	r24, 0x10	; 16
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <GLCD_SetYADDRESS+0x18>
	cbi(GLCD_CTRL_O, GLCD_RW);
	
	GLCD_DATA_O=GLCD_YADDRESS+Col;
	GLCD_ENABLE;		   //Pull the EN line up	
	GLCD_Delay();
	GLCD_DISABLE;		   //Pull the EN line down
     7fa:	c1 98       	cbi	0x18, 1	; 24
}
     7fc:	1f 91       	pop	r17
     7fe:	08 95       	ret

00000800 <GLCD_SetXADDRESS>:
void GLCD_SetXADDRESS(uint8_t Line){ //set X address (or line) of GLCD
     800:	1f 93       	push	r17
     802:	18 2f       	mov	r17, r24
	wait_GLCD();
     804:	0e 94 c5 03 	call	0x78a	; 0x78a <wait_GLCD>
	GLCD_OUT_Set();
     808:	0e 94 a3 03 	call	0x746	; 0x746 <GLCD_OUT_Set>
	cbi(GLCD_CTRL_O, GLCD_RS); //pull both RS, RW down,(AVR->GLCD)
     80c:	c3 98       	cbi	0x18, 3	; 24
	cbi(GLCD_CTRL_O, GLCD_RW);
     80e:	c2 98       	cbi	0x18, 2	; 24
	
	GLCD_DATA_O=GLCD_XADDRESS+Line;
     810:	18 54       	subi	r17, 0x48	; 72
     812:	12 bb       	out	0x12, r17	; 18
	GLCD_ENABLE;		   //Pull the EN line up
     814:	c1 9a       	sbi	0x18, 1	; 24
     816:	80 e0       	ldi	r24, 0x00	; 0
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     818:	00 00       	nop
     81a:	8f 5f       	subi	r24, 0xFF	; 255
     81c:	80 31       	cpi	r24, 0x10	; 16
     81e:	e1 f7       	brne	.-8      	; 0x818 <GLCD_SetXADDRESS+0x18>
	cbi(GLCD_CTRL_O, GLCD_RW);
	
	GLCD_DATA_O=GLCD_XADDRESS+Line;
	GLCD_ENABLE;		   //Pull the EN line up
	GLCD_Delay();
	GLCD_DISABLE;		   //Pull the EN line down		
     820:	c1 98       	cbi	0x18, 1	; 24
}
     822:	1f 91       	pop	r17
     824:	08 95       	ret

00000826 <GLCD_StartLine>:
void GLCD_StartLine(uint8_t Offset){ //set Y address (or column) of GLCD
     826:	1f 93       	push	r17
     828:	18 2f       	mov	r17, r24
	wait_GLCD();
     82a:	0e 94 c5 03 	call	0x78a	; 0x78a <wait_GLCD>
	GLCD_OUT_Set();
     82e:	0e 94 a3 03 	call	0x746	; 0x746 <GLCD_OUT_Set>
	cbi(GLCD_CTRL_O, GLCD_RS); //pull both RS, RW down, (AVR->GLCD)
     832:	c3 98       	cbi	0x18, 3	; 24
	cbi(GLCD_CTRL_O, GLCD_RW);
     834:	c2 98       	cbi	0x18, 2	; 24
	
	GLCD_SetSide(0);
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	0e 94 b3 03 	call	0x766	; 0x766 <GLCD_SetSide>
	GLCD_DATA_O=GLCD_STARTLINE+Offset;
     83c:	10 54       	subi	r17, 0x40	; 64
     83e:	12 bb       	out	0x12, r17	; 18
	GLCD_ENABLE;		   //Pull the EN line up	
     840:	c1 9a       	sbi	0x18, 1	; 24
     842:	80 e0       	ldi	r24, 0x00	; 0
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     844:	00 00       	nop
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	80 31       	cpi	r24, 0x10	; 16
     84a:	e1 f7       	brne	.-8      	; 0x844 <GLCD_StartLine+0x1e>
	
	GLCD_SetSide(0);
	GLCD_DATA_O=GLCD_STARTLINE+Offset;
	GLCD_ENABLE;		   //Pull the EN line up	
	GLCD_Delay();
	GLCD_DISABLE;		   //Pull the EN line down
     84c:	c1 98       	cbi	0x18, 1	; 24
	
	GLCD_SetSide(1);
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	0e 94 b3 03 	call	0x766	; 0x766 <GLCD_SetSide>
	GLCD_ENABLE;		   //Pull the EN line up		
     854:	c1 9a       	sbi	0x18, 1	; 24
	GLCD_DATA_O=GLCD_STARTLINE+Offset;
     856:	12 bb       	out	0x12, r17	; 18
     858:	80 e0       	ldi	r24, 0x00	; 0
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     85a:	00 00       	nop
     85c:	8f 5f       	subi	r24, 0xFF	; 255
     85e:	80 31       	cpi	r24, 0x10	; 16
     860:	e1 f7       	brne	.-8      	; 0x85a <GLCD_StartLine+0x34>
	
	GLCD_SetSide(1);
	GLCD_ENABLE;		   //Pull the EN line up		
	GLCD_DATA_O=GLCD_STARTLINE+Offset;
	GLCD_Delay();
	GLCD_DISABLE;		   //Pull the EN line down
     862:	c1 98       	cbi	0x18, 1	; 24
}
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <GLCD_WriteDATA>:
//-------------------------END For INSTRUCTION---------------------

//-------------------------For DATA---------------------
//write Data to GLCD: used in "Write Display Data" only
void GLCD_WriteDATA(uint8_t DATA){	
     868:	1f 93       	push	r17
     86a:	18 2f       	mov	r17, r24
	wait_GLCD();
     86c:	0e 94 c5 03 	call	0x78a	; 0x78a <wait_GLCD>
	GLCD_OUT_Set();
     870:	0e 94 a3 03 	call	0x746	; 0x746 <GLCD_OUT_Set>
	sbi(GLCD_CTRL_O, GLCD_RS); //pull RS up
     874:	c3 9a       	sbi	0x18, 3	; 24
	cbi(GLCD_CTRL_O, GLCD_RW); //RW down,  (AVR->GLCD)
     876:	c2 98       	cbi	0x18, 2	; 24
	GLCD_DATA_O=DATA;	    // Put Data out
     878:	12 bb       	out	0x12, r17	; 18
	
	GLCD_ENABLE;		   //Pull the EN line up	
     87a:	c1 9a       	sbi	0x18, 1	; 24
     87c:	80 e0       	ldi	r24, 0x00	; 0
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     87e:	00 00       	nop
     880:	8f 5f       	subi	r24, 0xFF	; 255
     882:	80 31       	cpi	r24, 0x10	; 16
     884:	e1 f7       	brne	.-8      	; 0x87e <GLCD_WriteDATA+0x16>
	cbi(GLCD_CTRL_O, GLCD_RW); //RW down,  (AVR->GLCD)
	GLCD_DATA_O=DATA;	    // Put Data out
	
	GLCD_ENABLE;		   //Pull the EN line up	
	GLCD_Delay();
	GLCD_DISABLE;		   //Pull the EN line down
     886:	c1 98       	cbi	0x18, 1	; 24
     888:	80 e0       	ldi	r24, 0x00	; 0
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     88a:	00 00       	nop
     88c:	8f 5f       	subi	r24, 0xFF	; 255
     88e:	80 31       	cpi	r24, 0x10	; 16
     890:	e1 f7       	brne	.-8      	; 0x88a <GLCD_WriteDATA+0x22>
	GLCD_ENABLE;		   //Pull the EN line up	
	GLCD_Delay();
	GLCD_DISABLE;		   //Pull the EN line down
	GLCD_Delay();
	
}
     892:	1f 91       	pop	r17
     894:	08 95       	ret

00000896 <GLCD_ReadDATA>:
//Read DATA from GLCD: used for "Read Display Data" only
uint8_t GLCD_ReadDATA(void){
	uint8_t DATA;
	wait_GLCD();
     896:	0e 94 c5 03 	call	0x78a	; 0x78a <wait_GLCD>
	GLCD_IN_Set();
     89a:	0e 94 ab 03 	call	0x756	; 0x756 <GLCD_IN_Set>
	sbi(GLCD_CTRL_O, GLCD_RS); //pull both RS up	
     89e:	c3 9a       	sbi	0x18, 3	; 24
	sbi(GLCD_CTRL_O, GLCD_RW); //pull both RW up, (GLCD->AVR)
     8a0:	c2 9a       	sbi	0x18, 2	; 24
	
	GLCD_ENABLE;		   //Pull the EN line up
     8a2:	c1 9a       	sbi	0x18, 1	; 24
     8a4:	80 e0       	ldi	r24, 0x00	; 0
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     8a6:	00 00       	nop
     8a8:	8f 5f       	subi	r24, 0xFF	; 255
     8aa:	80 31       	cpi	r24, 0x10	; 16
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <GLCD_ReadDATA+0x10>
	sbi(GLCD_CTRL_O, GLCD_RW); //pull both RW up, (GLCD->AVR)
	
	GLCD_ENABLE;		   //Pull the EN line up
	GLCD_Delay();		
	
	GLCD_DISABLE;		    //[new] ket thuc lan doc 1 (doc gia - dummy read)	
     8ae:	c1 98       	cbi	0x18, 1	; 24
     8b0:	80 e0       	ldi	r24, 0x00	; 0
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     8b2:	00 00       	nop
     8b4:	8f 5f       	subi	r24, 0xFF	; 255
     8b6:	80 31       	cpi	r24, 0x10	; 16
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <GLCD_ReadDATA+0x1c>
	GLCD_ENABLE;		   //Pull the EN line up
	GLCD_Delay();		
	
	GLCD_DISABLE;		    //[new] ket thuc lan doc 1 (doc gia - dummy read)	
	GLCD_Delay();			//[new]	cho du lieu tu GLCD RAM duoc day ra thanh ghi output		
	GLCD_ENABLE;		   	//[new] Pull the EN line up	(chuan bi cho lan 2)	
     8ba:	c1 9a       	sbi	0x18, 1	; 24
	
	DATA=GLCD_DATA_I;	   // get Data
     8bc:	80 b3       	in	r24, 0x10	; 16
	GLCD_DISABLE;		   //Pull the EN line down
     8be:	c1 98       	cbi	0x18, 1	; 24
     8c0:	90 e0       	ldi	r25, 0x00	; 0
#define GLCD_STARTLINE	0xC0 //11xxxxxx: Display start line or page scroll, xxxxxx is the offset of scroll
#define GLCD_BUSY		7 //bit Busy in Status 

//*************************supporting functions*****************************
void GLCD_Delay(void){
	for(uint8_t i=0; i<16; i++) asm volatile ("nop"::);								
     8c2:	00 00       	nop
     8c4:	9f 5f       	subi	r25, 0xFF	; 255
     8c6:	90 31       	cpi	r25, 0x10	; 16
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <GLCD_ReadDATA+0x2c>
	DATA=GLCD_DATA_I;	   // get Data
	GLCD_DISABLE;		   //Pull the EN line down
	GLCD_Delay();
			
	return DATA;
}
     8ca:	08 95       	ret

000008cc <GLCD_Init>:


//*************************Direct used Function*******************************
//----Initialize GLCD---------------------
void GLCD_Init(void){
	GLCD_SetSide(0); // left side
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	0e 94 b3 03 	call	0x766	; 0x766 <GLCD_SetSide>
	GLCD_SetDISPLAY(1);
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	0e 94 da 03 	call	0x7b4	; 0x7b4 <GLCD_SetDISPLAY>
	GLCD_SetYADDRESS(0);
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	0e 94 ed 03 	call	0x7da	; 0x7da <GLCD_SetYADDRESS>
	GLCD_SetXADDRESS(0);
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 00 04 	call	0x800	; 0x800 <GLCD_SetXADDRESS>
	GLCD_StartLine(0);
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	0e 94 13 04 	call	0x826	; 0x826 <GLCD_StartLine>
	
	GLCD_SetSide(1); //right side
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	0e 94 b3 03 	call	0x766	; 0x766 <GLCD_SetSide>
	GLCD_SetDISPLAY(1);
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <GLCD_SetDISPLAY>
	GLCD_SetYADDRESS(0);
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	0e 94 ed 03 	call	0x7da	; 0x7da <GLCD_SetYADDRESS>
	GLCD_SetXADDRESS(0);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	0e 94 00 04 	call	0x800	; 0x800 <GLCD_SetXADDRESS>
	GLCD_StartLine(0);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 13 04 	call	0x826	; 0x826 <GLCD_StartLine>
}
     908:	08 95       	ret

0000090a <GLCD_GotoXY>:
//------move the pointer to the X, Y position---------
void GLCD_GotoXY(uint8_t Line, uint8_t Col){ //Line:0-7, Col: 0-127
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	f8 2e       	mov	r15, r24
     912:	06 2f       	mov	r16, r22
	uint8_t Side;
	Side=Col/64 ; //Select controller, 0:Left, 1: Right
     914:	16 2f       	mov	r17, r22
     916:	12 95       	swap	r17
     918:	16 95       	lsr	r17
     91a:	16 95       	lsr	r17
     91c:	13 70       	andi	r17, 0x03	; 3
	GLCD_SetSide(Side);
     91e:	81 2f       	mov	r24, r17
     920:	0e 94 b3 03 	call	0x766	; 0x766 <GLCD_SetSide>
	Col -= 64*Side; //Update real Col : 0-63
	GLCD_SetYADDRESS(Col);
     924:	81 2f       	mov	r24, r17
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	26 e0       	ldi	r18, 0x06	; 6
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	2a 95       	dec	r18
     930:	e1 f7       	brne	.-8      	; 0x92a <GLCD_GotoXY+0x20>
     932:	08 1b       	sub	r16, r24
     934:	80 2f       	mov	r24, r16
     936:	0e 94 ed 03 	call	0x7da	; 0x7da <GLCD_SetYADDRESS>
	GLCD_SetXADDRESS(Line);	
     93a:	8f 2d       	mov	r24, r15
     93c:	0e 94 00 04 	call	0x800	; 0x800 <GLCD_SetXADDRESS>
}
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	08 95       	ret

00000948 <GLCD_Clr>:
void GLCD_Clr(void){
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t Line, Col;		
	for (Line=0; Line<8; Line++){
		GLCD_GotoXY(Line,0);		
     94e:	80 2f       	mov	r24, r16
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	0e 94 85 04 	call	0x90a	; 0x90a <GLCD_GotoXY>
     956:	10 e0       	ldi	r17, 0x00	; 0
		for (Col=0; Col<64; Col++) GLCD_WriteDATA(0);
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 34 04 	call	0x868	; 0x868 <GLCD_WriteDATA>
     95e:	1f 5f       	subi	r17, 0xFF	; 255
     960:	10 34       	cpi	r17, 0x40	; 64
     962:	d1 f7       	brne	.-12     	; 0x958 <GLCD_Clr+0x10>
	GLCD_SetYADDRESS(Col);
	GLCD_SetXADDRESS(Line);	
}
void GLCD_Clr(void){
	uint8_t Line, Col;		
	for (Line=0; Line<8; Line++){
     964:	0f 5f       	subi	r16, 0xFF	; 255
     966:	08 30       	cpi	r16, 0x08	; 8
     968:	91 f7       	brne	.-28     	; 0x94e <GLCD_Clr+0x6>
     96a:	00 e0       	ldi	r16, 0x00	; 0
		GLCD_GotoXY(Line,0);		
		for (Col=0; Col<64; Col++) GLCD_WriteDATA(0);
	}
	for (Line=0; Line<8; Line++){
		GLCD_GotoXY(Line,64);		
     96c:	80 2f       	mov	r24, r16
     96e:	60 e4       	ldi	r22, 0x40	; 64
     970:	0e 94 85 04 	call	0x90a	; 0x90a <GLCD_GotoXY>
     974:	10 e0       	ldi	r17, 0x00	; 0
		for (Col=0; Col<64; Col++) GLCD_WriteDATA(0);
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	0e 94 34 04 	call	0x868	; 0x868 <GLCD_WriteDATA>
     97c:	1f 5f       	subi	r17, 0xFF	; 255
     97e:	10 34       	cpi	r17, 0x40	; 64
     980:	d1 f7       	brne	.-12     	; 0x976 <GLCD_Clr+0x2e>
	uint8_t Line, Col;		
	for (Line=0; Line<8; Line++){
		GLCD_GotoXY(Line,0);		
		for (Col=0; Col<64; Col++) GLCD_WriteDATA(0);
	}
	for (Line=0; Line<8; Line++){
     982:	0f 5f       	subi	r16, 0xFF	; 255
     984:	08 30       	cpi	r16, 0x08	; 8
     986:	91 f7       	brne	.-28     	; 0x96c <GLCD_Clr+0x24>
		GLCD_GotoXY(Line,64);		
		for (Col=0; Col<64; Col++) GLCD_WriteDATA(0);
	}	
}
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	08 95       	ret

0000098e <GLCD_PutChar78>:
//-------Print a character with 7x8 size onto GLCD-------
void GLCD_PutChar78(uint8_t Line, uint8_t Col, uint8_t chr){
     98e:	df 92       	push	r13
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	d8 2e       	mov	r13, r24
     99e:	06 2f       	mov	r16, r22
     9a0:	14 2f       	mov	r17, r20
	uint8_t i;	
	if ((Col>57) && (Col<64)){ //there is a "jump" from left->right
     9a2:	86 2f       	mov	r24, r22
     9a4:	8a 53       	subi	r24, 0x3A	; 58
     9a6:	86 30       	cpi	r24, 0x06	; 6
     9a8:	90 f5       	brcc	.+100    	; 0xa0e <GLCD_PutChar78+0x80>
		GLCD_GotoXY(Line, Col);    //left first
     9aa:	8d 2d       	mov	r24, r13
     9ac:	0e 94 85 04 	call	0x90a	; 0x90a <GLCD_GotoXY>
		for(i=0;i<64-Col;i++) 
			GLCD_WriteDATA(pgm_read_byte(&font7x8[((chr - 32) * 7) + i]));
     9b0:	87 e0       	ldi	r24, 0x07	; 7
     9b2:	18 9f       	mul	r17, r24
     9b4:	70 01       	movw	r14, r0
     9b6:	11 24       	eor	r1, r1
     9b8:	80 e2       	ldi	r24, 0x20	; 32
     9ba:	9f ef       	ldi	r25, 0xFF	; 255
     9bc:	e8 0e       	add	r14, r24
     9be:	f9 1e       	adc	r15, r25
     9c0:	10 e0       	ldi	r17, 0x00	; 0
//-------Print a character with 7x8 size onto GLCD-------
void GLCD_PutChar78(uint8_t Line, uint8_t Col, uint8_t chr){
	uint8_t i;	
	if ((Col>57) && (Col<64)){ //there is a "jump" from left->right
		GLCD_GotoXY(Line, Col);    //left first
		for(i=0;i<64-Col;i++) 
     9c2:	c0 e4       	ldi	r28, 0x40	; 64
     9c4:	d0 e0       	ldi	r29, 0x00	; 0
     9c6:	c0 1b       	sub	r28, r16
     9c8:	d1 09       	sbc	r29, r1
     9ca:	08 c0       	rjmp	.+16     	; 0x9dc <GLCD_PutChar78+0x4e>
			GLCD_WriteDATA(pgm_read_byte(&font7x8[((chr - 32) * 7) + i]));
     9cc:	ee 0d       	add	r30, r14
     9ce:	ff 1d       	adc	r31, r15
     9d0:	ec 5a       	subi	r30, 0xAC	; 172
     9d2:	fb 4f       	sbci	r31, 0xFB	; 251
     9d4:	84 91       	lpm	r24, Z+
     9d6:	0e 94 34 04 	call	0x868	; 0x868 <GLCD_WriteDATA>
//-------Print a character with 7x8 size onto GLCD-------
void GLCD_PutChar78(uint8_t Line, uint8_t Col, uint8_t chr){
	uint8_t i;	
	if ((Col>57) && (Col<64)){ //there is a "jump" from left->right
		GLCD_GotoXY(Line, Col);    //left first
		for(i=0;i<64-Col;i++) 
     9da:	1f 5f       	subi	r17, 0xFF	; 255
     9dc:	e1 2f       	mov	r30, r17
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	ec 17       	cp	r30, r28
     9e2:	fd 07       	cpc	r31, r29
     9e4:	9c f3       	brlt	.-26     	; 0x9cc <GLCD_PutChar78+0x3e>
			GLCD_WriteDATA(pgm_read_byte(&font7x8[((chr - 32) * 7) + i]));
		GLCD_GotoXY(Line, 64);   // then right
     9e6:	8d 2d       	mov	r24, r13
     9e8:	60 e4       	ldi	r22, 0x40	; 64
     9ea:	0e 94 85 04 	call	0x90a	; 0x90a <GLCD_GotoXY>
		for(i=64-Col;i<7;i++) 
     9ee:	10 e4       	ldi	r17, 0x40	; 64
     9f0:	10 1b       	sub	r17, r16
     9f2:	0a c0       	rjmp	.+20     	; 0xa08 <GLCD_PutChar78+0x7a>
			GLCD_WriteDATA(pgm_read_byte(&font7x8[((chr - 32) * 7) + i]));
     9f4:	f7 01       	movw	r30, r14
     9f6:	e1 0f       	add	r30, r17
     9f8:	f1 1d       	adc	r31, r1
     9fa:	ec 5a       	subi	r30, 0xAC	; 172
     9fc:	fb 4f       	sbci	r31, 0xFB	; 251
     9fe:	e4 91       	lpm	r30, Z+
     a00:	8e 2f       	mov	r24, r30
     a02:	0e 94 34 04 	call	0x868	; 0x868 <GLCD_WriteDATA>
	if ((Col>57) && (Col<64)){ //there is a "jump" from left->right
		GLCD_GotoXY(Line, Col);    //left first
		for(i=0;i<64-Col;i++) 
			GLCD_WriteDATA(pgm_read_byte(&font7x8[((chr - 32) * 7) + i]));
		GLCD_GotoXY(Line, 64);   // then right
		for(i=64-Col;i<7;i++) 
     a06:	1f 5f       	subi	r17, 0xFF	; 255
     a08:	17 30       	cpi	r17, 0x07	; 7
     a0a:	a0 f3       	brcs	.-24     	; 0x9f4 <GLCD_PutChar78+0x66>
     a0c:	15 c0       	rjmp	.+42     	; 0xa38 <GLCD_PutChar78+0xaa>
			GLCD_WriteDATA(pgm_read_byte(&font7x8[((chr - 32) * 7) + i]));
	}
	else{
		GLCD_GotoXY(Line, Col);
     a0e:	8d 2d       	mov	r24, r13
     a10:	0e 94 85 04 	call	0x90a	; 0x90a <GLCD_GotoXY>
		for(i=0;i<7;i++) 
			GLCD_WriteDATA(pgm_read_byte(&font7x8[((chr - 32) * 7) + i]));
     a14:	87 e0       	ldi	r24, 0x07	; 7
     a16:	18 9f       	mul	r17, r24
     a18:	c0 01       	movw	r24, r0
     a1a:	11 24       	eor	r1, r1
     a1c:	ec 01       	movw	r28, r24
     a1e:	cc 58       	subi	r28, 0x8C	; 140
     a20:	dc 4f       	sbci	r29, 0xFC	; 252
		for(i=64-Col;i<7;i++) 
			GLCD_WriteDATA(pgm_read_byte(&font7x8[((chr - 32) * 7) + i]));
	}
	else{
		GLCD_GotoXY(Line, Col);
		for(i=0;i<7;i++) 
     a22:	8c 01       	movw	r16, r24
     a24:	05 58       	subi	r16, 0x85	; 133
     a26:	1c 4f       	sbci	r17, 0xFC	; 252
			GLCD_WriteDATA(pgm_read_byte(&font7x8[((chr - 32) * 7) + i]));
     a28:	fe 01       	movw	r30, r28
     a2a:	84 91       	lpm	r24, Z+
     a2c:	0e 94 34 04 	call	0x868	; 0x868 <GLCD_WriteDATA>
     a30:	21 96       	adiw	r28, 0x01	; 1
		for(i=64-Col;i<7;i++) 
			GLCD_WriteDATA(pgm_read_byte(&font7x8[((chr - 32) * 7) + i]));
	}
	else{
		GLCD_GotoXY(Line, Col);
		for(i=0;i<7;i++) 
     a32:	c0 17       	cp	r28, r16
     a34:	d1 07       	cpc	r29, r17
     a36:	c1 f7       	brne	.-16     	; 0xa28 <GLCD_PutChar78+0x9a>
			GLCD_WriteDATA(pgm_read_byte(&font7x8[((chr - 32) * 7) + i]));
	}
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	08 95       	ret

00000a48 <GLCD_Print78>:
//print an array of character onto GLCD----
void GLCD_Print78(uint8_t Line, uint8_t Col, char* str){
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	f8 2e       	mov	r15, r24
     a54:	ea 01       	movw	r28, r20
     a56:	16 2f       	mov	r17, r22
     a58:	00 e0       	ldi	r16, 0x00	; 0
     a5a:	0a c0       	rjmp	.+20     	; 0xa70 <GLCD_Print78+0x28>
	uint8_t i, x;
	x=Col;
	for (i=0; str[i]!=0; i++){
		if (x>=128){
     a5c:	17 ff       	sbrs	r17, 7
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <GLCD_Print78+0x1c>
			Col=0;
			x=Col;
			Line++;
     a60:	f3 94       	inc	r15
     a62:	10 e0       	ldi	r17, 0x00	; 0
		}
		GLCD_PutChar78(Line, x , str[i]);	 
     a64:	8f 2d       	mov	r24, r15
     a66:	61 2f       	mov	r22, r17
     a68:	0e 94 c7 04 	call	0x98e	; 0x98e <GLCD_PutChar78>
		x+=8;
     a6c:	18 5f       	subi	r17, 0xF8	; 248
}
//print an array of character onto GLCD----
void GLCD_Print78(uint8_t Line, uint8_t Col, char* str){
	uint8_t i, x;
	x=Col;
	for (i=0; str[i]!=0; i++){
     a6e:	0f 5f       	subi	r16, 0xFF	; 255
     a70:	fe 01       	movw	r30, r28
     a72:	e0 0f       	add	r30, r16
     a74:	f1 1d       	adc	r31, r1
     a76:	40 81       	ld	r20, Z
     a78:	44 23       	and	r20, r20
     a7a:	81 f7       	brne	.-32     	; 0xa5c <GLCD_Print78+0x14>
			Line++;
		}
		GLCD_PutChar78(Line, x , str[i]);	 
		x+=8;
    }
}
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	ff 90       	pop	r15
     a86:	08 95       	ret

00000a88 <GLCD_PutBMP>:
//-----fill GLCD with a bipmap size 128x64-----------
void GLCD_PutBMP(char *bmp){
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	6c 01       	movw	r12, r24
     a9a:	00 e0       	ldi	r16, 0x00	; 0
     a9c:	ee 24       	eor	r14, r14
     a9e:	ff 24       	eor	r15, r15
	uint8_t Line, Col;
	uint16_t i;
	for (Line=0; Line<8; Line++){
		GLCD_GotoXY(Line,0);		
     aa0:	80 2f       	mov	r24, r16
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	0e 94 85 04 	call	0x90a	; 0x90a <GLCD_GotoXY>
     aa8:	e6 01       	movw	r28, r12
     aaa:	ce 0d       	add	r28, r14
     aac:	df 1d       	adc	r29, r15
     aae:	10 e0       	ldi	r17, 0x00	; 0
		for (Col=0; Col<64; Col++){ //Left LCD
			i=128*Line+Col;
			GLCD_WriteDATA(pgm_read_byte(&bmp[i]));
     ab0:	fe 01       	movw	r30, r28
     ab2:	84 91       	lpm	r24, Z+
     ab4:	0e 94 34 04 	call	0x868	; 0x868 <GLCD_WriteDATA>
void GLCD_PutBMP(char *bmp){
	uint8_t Line, Col;
	uint16_t i;
	for (Line=0; Line<8; Line++){
		GLCD_GotoXY(Line,0);		
		for (Col=0; Col<64; Col++){ //Left LCD
     ab8:	1f 5f       	subi	r17, 0xFF	; 255
     aba:	21 96       	adiw	r28, 0x01	; 1
     abc:	10 34       	cpi	r17, 0x40	; 64
     abe:	c1 f7       	brne	.-16     	; 0xab0 <GLCD_PutBMP+0x28>
			i=128*Line+Col;
			GLCD_WriteDATA(pgm_read_byte(&bmp[i]));
		}
		GLCD_GotoXY(Line,64);
     ac0:	80 2f       	mov	r24, r16
     ac2:	60 e4       	ldi	r22, 0x40	; 64
     ac4:	0e 94 85 04 	call	0x90a	; 0x90a <GLCD_GotoXY>
		for (Col=64; Col<128; Col++){ //Right LCD
			i=128*Line+Col;
			GLCD_WriteDATA(pgm_read_byte(&bmp[i]));
     ac8:	f7 01       	movw	r30, r14
     aca:	e1 0f       	add	r30, r17
     acc:	f1 1d       	adc	r31, r1
     ace:	ec 0d       	add	r30, r12
     ad0:	fd 1d       	adc	r31, r13
     ad2:	e4 91       	lpm	r30, Z+
     ad4:	8e 2f       	mov	r24, r30
     ad6:	0e 94 34 04 	call	0x868	; 0x868 <GLCD_WriteDATA>
		for (Col=0; Col<64; Col++){ //Left LCD
			i=128*Line+Col;
			GLCD_WriteDATA(pgm_read_byte(&bmp[i]));
		}
		GLCD_GotoXY(Line,64);
		for (Col=64; Col<128; Col++){ //Right LCD
     ada:	1f 5f       	subi	r17, 0xFF	; 255
     adc:	10 38       	cpi	r17, 0x80	; 128
     ade:	a1 f7       	brne	.-24     	; 0xac8 <GLCD_PutBMP+0x40>
}
//-----fill GLCD with a bipmap size 128x64-----------
void GLCD_PutBMP(char *bmp){
	uint8_t Line, Col;
	uint16_t i;
	for (Line=0; Line<8; Line++){
     ae0:	0f 5f       	subi	r16, 0xFF	; 255
     ae2:	80 e8       	ldi	r24, 0x80	; 128
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	e8 0e       	add	r14, r24
     ae8:	f9 1e       	adc	r15, r25
     aea:	08 30       	cpi	r16, 0x08	; 8
     aec:	c9 f6       	brne	.-78     	; 0xaa0 <GLCD_PutBMP+0x18>
		for (Col=64; Col<128; Col++){ //Right LCD
			i=128*Line+Col;
			GLCD_WriteDATA(pgm_read_byte(&bmp[i]));
		}			
	}
}
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
     afe:	08 95       	ret

00000b00 <GLCD_PutPixel>:

//-----------V2-------------------------------------------------------------------
#define abs(n)          __builtin_abs ((n))

void GLCD_PutPixel(uint8_t x, uint8_t y){//(x, y) toa do diem can ve. [0:127, 0:63] 
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	df 93       	push	r29
     b08:	cf 93       	push	r28
     b0a:	0f 92       	push	r0
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	f8 2e       	mov	r15, r24
	uint8_t GLCD_oldData, Line;
	y=63-y; //mang goc toa do xuong duoi
     b12:	1f e3       	ldi	r17, 0x3F	; 63
     b14:	16 1b       	sub	r17, r22
	Line=y>>3; //tuong duong y/8
     b16:	01 2f       	mov	r16, r17
     b18:	06 95       	lsr	r16
     b1a:	06 95       	lsr	r16
     b1c:	06 95       	lsr	r16
	y &=0x07; //chon 3 bit thap cua y, tuong duong phep chia lay phan du cua y cho 8
	
	GLCD_GotoXY(Line,x); //di chuyen den Line (page) can ghi/doc
     b1e:	80 2f       	mov	r24, r16
     b20:	6f 2d       	mov	r22, r15
     b22:	0e 94 85 04 	call	0x90a	; 0x90a <GLCD_GotoXY>
	GLCD_oldData=GLCD_ReadDATA(); //doc du lieu tu GLCD Ram, tai hang Line, cot x	
     b26:	0e 94 4b 04 	call	0x896	; 0x896 <GLCD_ReadDATA>
     b2a:	89 83       	std	Y+1, r24	; 0x01
	sbi(GLCD_oldData, y);//set bit thu y cua page hien tai
     b2c:	29 81       	ldd	r18, Y+1	; 0x01
     b2e:	17 70       	andi	r17, 0x07	; 7
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <GLCD_PutPixel+0x3a>
     b36:	88 0f       	add	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	1a 95       	dec	r17
     b3c:	e2 f7       	brpl	.-8      	; 0xb36 <GLCD_PutPixel+0x36>
     b3e:	28 2b       	or	r18, r24
     b40:	29 83       	std	Y+1, r18	; 0x01
	GLCD_GotoXY(Line,x); //di chuyen den Line (page) can ghi/doc
     b42:	80 2f       	mov	r24, r16
     b44:	6f 2d       	mov	r22, r15
     b46:	0e 94 85 04 	call	0x90a	; 0x90a <GLCD_GotoXY>
	GLCD_WriteDATA(GLCD_oldData);
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	0e 94 34 04 	call	0x868	; 0x868 <GLCD_WriteDATA>
}
     b50:	0f 90       	pop	r0
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	08 95       	ret

00000b5e <GLCD_ClrPixel>:

void GLCD_ClrPixel(uint8_t x, uint8_t y){//x: cot thu 0:127, y hang thu 0:63
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	0f 92       	push	r0
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	f8 2e       	mov	r15, r24
	uint8_t GLCD_oldData, Line;
	y=63-y; //mang goc toa do xuong duoi
     b70:	1f e3       	ldi	r17, 0x3F	; 63
     b72:	16 1b       	sub	r17, r22
	Line=y>>3; //tuong duong y/8
     b74:	01 2f       	mov	r16, r17
     b76:	06 95       	lsr	r16
     b78:	06 95       	lsr	r16
     b7a:	06 95       	lsr	r16
	y &=0x07; //chon 3 bit thap cua y, tuong duong phep chia lay phan du cua y cho 8
	
	GLCD_GotoXY(Line,x); //di chuyen den Line (page) can ghi/doc
     b7c:	80 2f       	mov	r24, r16
     b7e:	6f 2d       	mov	r22, r15
     b80:	0e 94 85 04 	call	0x90a	; 0x90a <GLCD_GotoXY>
	GLCD_oldData=GLCD_ReadDATA(); //doc du lieu tu GLCD Ram, tai hang Line, cot x
     b84:	0e 94 4b 04 	call	0x896	; 0x896 <GLCD_ReadDATA>
     b88:	89 83       	std	Y+1, r24	; 0x01
	cbi(GLCD_oldData, y); //xoa bit thu y cua page hien tai
     b8a:	29 81       	ldd	r18, Y+1	; 0x01
     b8c:	17 70       	andi	r17, 0x07	; 7
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <GLCD_ClrPixel+0x3a>
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	1a 95       	dec	r17
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <GLCD_ClrPixel+0x36>
     b9c:	80 95       	com	r24
     b9e:	82 23       	and	r24, r18
     ba0:	89 83       	std	Y+1, r24	; 0x01
	GLCD_GotoXY(Line,x); //di chuyen den Line (page) can ghi/doc
     ba2:	80 2f       	mov	r24, r16
     ba4:	6f 2d       	mov	r22, r15
     ba6:	0e 94 85 04 	call	0x90a	; 0x90a <GLCD_GotoXY>
	GLCD_WriteDATA(GLCD_oldData); 
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	0e 94 34 04 	call	0x868	; 0x868 <GLCD_WriteDATA>
}
     bb0:	0f 90       	pop	r0
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	08 95       	ret

00000bbe <GLCD_PutLine>:

void GLCD_PutLine(uint8_t x1, uint8_t y1, uint8_t x2,uint8_t y2){  // Ve 1 duong thang len GLCD
     bbe:	6f 92       	push	r6
     bc0:	7f 92       	push	r7
     bc2:	8f 92       	push	r8
     bc4:	9f 92       	push	r9
     bc6:	af 92       	push	r10
     bc8:	bf 92       	push	r11
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	08 2f       	mov	r16, r24
     bdc:	16 2f       	mov	r17, r22
     bde:	e4 2e       	mov	r14, r20
     be0:	f2 2e       	mov	r15, r18
  uint8_t x,y;	
  if(abs(x2-x1)>=abs(y2-y1)){ //truong hop truc x lon hon truc y
     be2:	24 2f       	mov	r18, r20
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	28 1b       	sub	r18, r24
     be8:	31 09       	sbc	r19, r1
     bea:	37 ff       	sbrs	r19, 7
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <GLCD_PutLine+0x36>
     bee:	30 95       	com	r19
     bf0:	21 95       	neg	r18
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	8f 2d       	mov	r24, r15
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	81 1b       	sub	r24, r17
     bfa:	91 09       	sbc	r25, r1
     bfc:	97 ff       	sbrs	r25, 7
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <GLCD_PutLine+0x48>
     c00:	90 95       	com	r25
     c02:	81 95       	neg	r24
     c04:	9f 4f       	sbci	r25, 0xFF	; 255
     c06:	28 17       	cp	r18, r24
     c08:	39 07       	cpc	r19, r25
     c0a:	0c f4       	brge	.+2      	; 0xc0e <GLCD_PutLine+0x50>
     c0c:	40 c0       	rjmp	.+128    	; 0xc8e <GLCD_PutLine+0xd0>
		if (x2<x1){ //hoan doi vi tri 2 diem
     c0e:	e0 16       	cp	r14, r16
     c10:	30 f4       	brcc	.+12     	; 0xc1e <GLCD_PutLine+0x60>
     c12:	8e 2d       	mov	r24, r14
     c14:	e0 2e       	mov	r14, r16
     c16:	08 2f       	mov	r16, r24
     c18:	8f 2d       	mov	r24, r15
     c1a:	f1 2e       	mov	r15, r17
     c1c:	18 2f       	mov	r17, r24
     c1e:	4e 2d       	mov	r20, r14
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	c0 2f       	mov	r28, r16
     c24:	d0 e0       	ldi	r29, 0x00	; 0
     c26:	2f 2d       	mov	r18, r15
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	81 2f       	mov	r24, r17
     c2c:	90 e0       	ldi	r25, 0x00	; 0
			x2 = x;
			y2 = y;
		}
		for(x=x1;x<=x2;++x){		
			if(y1>=y2)	y = y1 - (x-x1)*(y1-y2)/(x2-x1);
			else y = y1 + (x-x1)*(y2-y1)/(x2-x1);			
     c2e:	39 01       	movw	r6, r18
     c30:	68 1a       	sub	r6, r24
     c32:	79 0a       	sbc	r7, r25
     c34:	4a 01       	movw	r8, r20
     c36:	8c 1a       	sub	r8, r28
     c38:	9d 0a       	sbc	r9, r29
			y1 = y2;
			x2 = x;
			y2 = y;
		}
		for(x=x1;x<=x2;++x){		
			if(y1>=y2)	y = y1 - (x-x1)*(y1-y2)/(x2-x1);
     c3a:	5c 01       	movw	r10, r24
     c3c:	a2 1a       	sub	r10, r18
     c3e:	b3 0a       	sbc	r11, r19
     c40:	6e 01       	movw	r12, r28
     c42:	c4 1a       	sub	r12, r20
     c44:	d5 0a       	sbc	r13, r21
     c46:	20 c0       	rjmp	.+64     	; 0xc88 <GLCD_PutLine+0xca>
     c48:	20 2f       	mov	r18, r16
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	1f 15       	cp	r17, r15
     c4e:	58 f0       	brcs	.+22     	; 0xc66 <GLCD_PutLine+0xa8>
     c50:	2c 1b       	sub	r18, r28
     c52:	3d 0b       	sbc	r19, r29
     c54:	2a 9d       	mul	r18, r10
     c56:	c0 01       	movw	r24, r0
     c58:	2b 9d       	mul	r18, r11
     c5a:	90 0d       	add	r25, r0
     c5c:	3a 9d       	mul	r19, r10
     c5e:	90 0d       	add	r25, r0
     c60:	11 24       	eor	r1, r1
     c62:	b6 01       	movw	r22, r12
     c64:	0a c0       	rjmp	.+20     	; 0xc7a <GLCD_PutLine+0xbc>
			else y = y1 + (x-x1)*(y2-y1)/(x2-x1);			
     c66:	2c 1b       	sub	r18, r28
     c68:	3d 0b       	sbc	r19, r29
     c6a:	26 9d       	mul	r18, r6
     c6c:	c0 01       	movw	r24, r0
     c6e:	27 9d       	mul	r18, r7
     c70:	90 0d       	add	r25, r0
     c72:	36 9d       	mul	r19, r6
     c74:	90 0d       	add	r25, r0
     c76:	11 24       	eor	r1, r1
     c78:	b4 01       	movw	r22, r8
     c7a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodhi4>
     c7e:	61 0f       	add	r22, r17
			GLCD_PutPixel(x, y);			
     c80:	80 2f       	mov	r24, r16
     c82:	0e 94 80 05 	call	0xb00	; 0xb00 <GLCD_PutPixel>
			x1 = x2;
			y1 = y2;
			x2 = x;
			y2 = y;
		}
		for(x=x1;x<=x2;++x){		
     c86:	0f 5f       	subi	r16, 0xFF	; 255
     c88:	e0 16       	cp	r14, r16
     c8a:	f0 f6       	brcc	.-68     	; 0xc48 <GLCD_PutLine+0x8a>
     c8c:	40 c0       	rjmp	.+128    	; 0xd0e <GLCD_PutLine+0x150>
			else y = y1 + (x-x1)*(y2-y1)/(x2-x1);			
			GLCD_PutPixel(x, y);			
		}
	}	
	else{ //truong hop truc y lon hon truc x
		if (y2<y1){
     c8e:	f1 16       	cp	r15, r17
     c90:	30 f4       	brcc	.+12     	; 0xc9e <GLCD_PutLine+0xe0>
     c92:	8e 2d       	mov	r24, r14
     c94:	e0 2e       	mov	r14, r16
     c96:	08 2f       	mov	r16, r24
     c98:	8f 2d       	mov	r24, r15
     c9a:	f1 2e       	mov	r15, r17
     c9c:	18 2f       	mov	r17, r24
     c9e:	8e 2d       	mov	r24, r14
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	20 2f       	mov	r18, r16
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	4f 2d       	mov	r20, r15
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	c1 2f       	mov	r28, r17
     cac:	d0 e0       	ldi	r29, 0x00	; 0
			x2 = x;
			y2 = y;
		};		
		for(y=y1;y<=y2;y++){
			if(x1>=x2)	x = x1 - (y-y1)*(x1-x2)/(y2-y1);
			else x = x1 + (y-y1)*(x2-x1)/(y2-y1);
     cae:	3c 01       	movw	r6, r24
     cb0:	62 1a       	sub	r6, r18
     cb2:	73 0a       	sbc	r7, r19
     cb4:	4a 01       	movw	r8, r20
     cb6:	8c 1a       	sub	r8, r28
     cb8:	9d 0a       	sbc	r9, r29
			y1 = y2;
			x2 = x;
			y2 = y;
		};		
		for(y=y1;y<=y2;y++){
			if(x1>=x2)	x = x1 - (y-y1)*(x1-x2)/(y2-y1);
     cba:	59 01       	movw	r10, r18
     cbc:	a8 1a       	sub	r10, r24
     cbe:	b9 0a       	sbc	r11, r25
     cc0:	6e 01       	movw	r12, r28
     cc2:	c4 1a       	sub	r12, r20
     cc4:	d5 0a       	sbc	r13, r21
     cc6:	21 c0       	rjmp	.+66     	; 0xd0a <GLCD_PutLine+0x14c>
     cc8:	21 2f       	mov	r18, r17
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	0e 15       	cp	r16, r14
     cce:	58 f0       	brcs	.+22     	; 0xce6 <GLCD_PutLine+0x128>
     cd0:	2c 1b       	sub	r18, r28
     cd2:	3d 0b       	sbc	r19, r29
     cd4:	2a 9d       	mul	r18, r10
     cd6:	c0 01       	movw	r24, r0
     cd8:	2b 9d       	mul	r18, r11
     cda:	90 0d       	add	r25, r0
     cdc:	3a 9d       	mul	r19, r10
     cde:	90 0d       	add	r25, r0
     ce0:	11 24       	eor	r1, r1
     ce2:	b6 01       	movw	r22, r12
     ce4:	0a c0       	rjmp	.+20     	; 0xcfa <GLCD_PutLine+0x13c>
			else x = x1 + (y-y1)*(x2-x1)/(y2-y1);
     ce6:	2c 1b       	sub	r18, r28
     ce8:	3d 0b       	sbc	r19, r29
     cea:	26 9d       	mul	r18, r6
     cec:	c0 01       	movw	r24, r0
     cee:	27 9d       	mul	r18, r7
     cf0:	90 0d       	add	r25, r0
     cf2:	36 9d       	mul	r19, r6
     cf4:	90 0d       	add	r25, r0
     cf6:	11 24       	eor	r1, r1
     cf8:	b4 01       	movw	r22, r8
     cfa:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodhi4>
     cfe:	60 0f       	add	r22, r16
			GLCD_PutPixel(x,y);
     d00:	86 2f       	mov	r24, r22
     d02:	61 2f       	mov	r22, r17
     d04:	0e 94 80 05 	call	0xb00	; 0xb00 <GLCD_PutPixel>
			x1 = x2;
			y1 = y2;
			x2 = x;
			y2 = y;
		};		
		for(y=y1;y<=y2;y++){
     d08:	1f 5f       	subi	r17, 0xFF	; 255
     d0a:	f1 16       	cp	r15, r17
     d0c:	e8 f6       	brcc	.-70     	; 0xcc8 <GLCD_PutLine+0x10a>
			if(x1>=x2)	x = x1 - (y-y1)*(x1-x2)/(y2-y1);
			else x = x1 + (y-y1)*(x2-x1)/(y2-y1);
			GLCD_PutPixel(x,y);
		}
	}
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	bf 90       	pop	r11
     d20:	af 90       	pop	r10
     d22:	9f 90       	pop	r9
     d24:	8f 90       	pop	r8
     d26:	7f 90       	pop	r7
     d28:	6f 90       	pop	r6
     d2a:	08 95       	ret

00000d2c <GLCD_ClrLine>:

void GLCD_ClrLine(uint8_t x1, uint8_t y1,uint8_t x2,uint8_t y2){  // Xoa 1 duong thang tren GLCD    
     d2c:	6f 92       	push	r6
     d2e:	7f 92       	push	r7
     d30:	8f 92       	push	r8
     d32:	9f 92       	push	r9
     d34:	af 92       	push	r10
     d36:	bf 92       	push	r11
     d38:	cf 92       	push	r12
     d3a:	df 92       	push	r13
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	08 2f       	mov	r16, r24
     d4a:	16 2f       	mov	r17, r22
     d4c:	e4 2e       	mov	r14, r20
     d4e:	f2 2e       	mov	r15, r18
  uint8_t x,y;
  if(abs(x1-x2)>=abs(y1-y2)){
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	24 1b       	sub	r18, r20
     d56:	31 09       	sbc	r19, r1
     d58:	37 ff       	sbrs	r19, 7
     d5a:	03 c0       	rjmp	.+6      	; 0xd62 <GLCD_ClrLine+0x36>
     d5c:	30 95       	com	r19
     d5e:	21 95       	neg	r18
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	81 2f       	mov	r24, r17
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	8f 19       	sub	r24, r15
     d68:	91 09       	sbc	r25, r1
     d6a:	97 ff       	sbrs	r25, 7
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <GLCD_ClrLine+0x48>
     d6e:	90 95       	com	r25
     d70:	81 95       	neg	r24
     d72:	9f 4f       	sbci	r25, 0xFF	; 255
     d74:	28 17       	cp	r18, r24
     d76:	39 07       	cpc	r19, r25
     d78:	0c f4       	brge	.+2      	; 0xd7c <GLCD_ClrLine+0x50>
     d7a:	40 c0       	rjmp	.+128    	; 0xdfc <GLCD_ClrLine+0xd0>
	  if (x2<x1){
     d7c:	e0 16       	cp	r14, r16
     d7e:	30 f4       	brcc	.+12     	; 0xd8c <GLCD_ClrLine+0x60>
     d80:	8e 2d       	mov	r24, r14
     d82:	e0 2e       	mov	r14, r16
     d84:	08 2f       	mov	r16, r24
     d86:	8f 2d       	mov	r24, r15
     d88:	f1 2e       	mov	r15, r17
     d8a:	18 2f       	mov	r17, r24
     d8c:	c0 2f       	mov	r28, r16
     d8e:	d0 e0       	ldi	r29, 0x00	; 0
     d90:	4e 2d       	mov	r20, r14
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	21 2f       	mov	r18, r17
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	8f 2d       	mov	r24, r15
     d9a:	90 e0       	ldi	r25, 0x00	; 0
		x2 = x;
		y2 = y; 
	  };
	  for(x=x1;x<=x2;x++){
		if(y1>=y2)	y = y1 - (x-x1)*(y1-y2)/(x2-x1);
		else y = y1 + (x-x1)*(y2-y1)/(x2-x1);
     d9c:	3c 01       	movw	r6, r24
     d9e:	62 1a       	sub	r6, r18
     da0:	73 0a       	sbc	r7, r19
     da2:	4a 01       	movw	r8, r20
     da4:	8c 1a       	sub	r8, r28
     da6:	9d 0a       	sbc	r9, r29
		y1 = y2;
		x2 = x;
		y2 = y; 
	  };
	  for(x=x1;x<=x2;x++){
		if(y1>=y2)	y = y1 - (x-x1)*(y1-y2)/(x2-x1);
     da8:	59 01       	movw	r10, r18
     daa:	a8 1a       	sub	r10, r24
     dac:	b9 0a       	sbc	r11, r25
     dae:	6e 01       	movw	r12, r28
     db0:	c4 1a       	sub	r12, r20
     db2:	d5 0a       	sbc	r13, r21
     db4:	20 c0       	rjmp	.+64     	; 0xdf6 <GLCD_ClrLine+0xca>
     db6:	20 2f       	mov	r18, r16
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	1f 15       	cp	r17, r15
     dbc:	58 f0       	brcs	.+22     	; 0xdd4 <GLCD_ClrLine+0xa8>
     dbe:	2c 1b       	sub	r18, r28
     dc0:	3d 0b       	sbc	r19, r29
     dc2:	2a 9d       	mul	r18, r10
     dc4:	c0 01       	movw	r24, r0
     dc6:	2b 9d       	mul	r18, r11
     dc8:	90 0d       	add	r25, r0
     dca:	3a 9d       	mul	r19, r10
     dcc:	90 0d       	add	r25, r0
     dce:	11 24       	eor	r1, r1
     dd0:	b6 01       	movw	r22, r12
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <GLCD_ClrLine+0xbc>
		else y = y1 + (x-x1)*(y2-y1)/(x2-x1);
     dd4:	2c 1b       	sub	r18, r28
     dd6:	3d 0b       	sbc	r19, r29
     dd8:	26 9d       	mul	r18, r6
     dda:	c0 01       	movw	r24, r0
     ddc:	27 9d       	mul	r18, r7
     dde:	90 0d       	add	r25, r0
     de0:	36 9d       	mul	r19, r6
     de2:	90 0d       	add	r25, r0
     de4:	11 24       	eor	r1, r1
     de6:	b4 01       	movw	r22, r8
     de8:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodhi4>
     dec:	61 0f       	add	r22, r17
		GLCD_ClrPixel(x,y);
     dee:	80 2f       	mov	r24, r16
     df0:	0e 94 af 05 	call	0xb5e	; 0xb5e <GLCD_ClrPixel>
		x1 = x2;
		y1 = y2;
		x2 = x;
		y2 = y; 
	  };
	  for(x=x1;x<=x2;x++){
     df4:	0f 5f       	subi	r16, 0xFF	; 255
     df6:	e0 16       	cp	r14, r16
     df8:	f0 f6       	brcc	.-68     	; 0xdb6 <GLCD_ClrLine+0x8a>
     dfa:	40 c0       	rjmp	.+128    	; 0xe7c <GLCD_ClrLine+0x150>
		GLCD_ClrPixel(x,y);
		}		
		
	}
	else{
		if (y2<y1){
     dfc:	f1 16       	cp	r15, r17
     dfe:	30 f4       	brcc	.+12     	; 0xe0c <GLCD_ClrLine+0xe0>
     e00:	8e 2d       	mov	r24, r14
     e02:	e0 2e       	mov	r14, r16
     e04:	08 2f       	mov	r16, r24
     e06:	8f 2d       	mov	r24, r15
     e08:	f1 2e       	mov	r15, r17
     e0a:	18 2f       	mov	r17, r24
     e0c:	40 2f       	mov	r20, r16
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	2e 2d       	mov	r18, r14
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	c1 2f       	mov	r28, r17
     e16:	d0 e0       	ldi	r29, 0x00	; 0
     e18:	8f 2d       	mov	r24, r15
     e1a:	90 e0       	ldi	r25, 0x00	; 0
			x2 = x;
			y2 = y; 
		};		
        for(y=y1;y<=y2;y++){
			if(x1>=x2)	x = x1 - (y-y1)*(x1-x2)/(y2-y1);
			else x = x1 + (y-y1)*(x2-x1)/(y2-y1);
     e1c:	39 01       	movw	r6, r18
     e1e:	64 1a       	sub	r6, r20
     e20:	75 0a       	sbc	r7, r21
     e22:	4c 01       	movw	r8, r24
     e24:	8c 1a       	sub	r8, r28
     e26:	9d 0a       	sbc	r9, r29
			y1 = y2;
			x2 = x;
			y2 = y; 
		};		
        for(y=y1;y<=y2;y++){
			if(x1>=x2)	x = x1 - (y-y1)*(x1-x2)/(y2-y1);
     e28:	5a 01       	movw	r10, r20
     e2a:	a2 1a       	sub	r10, r18
     e2c:	b3 0a       	sbc	r11, r19
     e2e:	6e 01       	movw	r12, r28
     e30:	c8 1a       	sub	r12, r24
     e32:	d9 0a       	sbc	r13, r25
     e34:	21 c0       	rjmp	.+66     	; 0xe78 <GLCD_ClrLine+0x14c>
     e36:	21 2f       	mov	r18, r17
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	0e 15       	cp	r16, r14
     e3c:	58 f0       	brcs	.+22     	; 0xe54 <GLCD_ClrLine+0x128>
     e3e:	2c 1b       	sub	r18, r28
     e40:	3d 0b       	sbc	r19, r29
     e42:	2a 9d       	mul	r18, r10
     e44:	c0 01       	movw	r24, r0
     e46:	2b 9d       	mul	r18, r11
     e48:	90 0d       	add	r25, r0
     e4a:	3a 9d       	mul	r19, r10
     e4c:	90 0d       	add	r25, r0
     e4e:	11 24       	eor	r1, r1
     e50:	b6 01       	movw	r22, r12
     e52:	0a c0       	rjmp	.+20     	; 0xe68 <GLCD_ClrLine+0x13c>
			else x = x1 + (y-y1)*(x2-x1)/(y2-y1);
     e54:	2c 1b       	sub	r18, r28
     e56:	3d 0b       	sbc	r19, r29
     e58:	26 9d       	mul	r18, r6
     e5a:	c0 01       	movw	r24, r0
     e5c:	27 9d       	mul	r18, r7
     e5e:	90 0d       	add	r25, r0
     e60:	36 9d       	mul	r19, r6
     e62:	90 0d       	add	r25, r0
     e64:	11 24       	eor	r1, r1
     e66:	b4 01       	movw	r22, r8
     e68:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodhi4>
     e6c:	60 0f       	add	r22, r16
			GLCD_ClrPixel(x,y);
     e6e:	86 2f       	mov	r24, r22
     e70:	61 2f       	mov	r22, r17
     e72:	0e 94 af 05 	call	0xb5e	; 0xb5e <GLCD_ClrPixel>
			x1 = x2;
			y1 = y2;
			x2 = x;
			y2 = y; 
		};		
        for(y=y1;y<=y2;y++){
     e76:	1f 5f       	subi	r17, 0xFF	; 255
     e78:	f1 16       	cp	r15, r17
     e7a:	e8 f6       	brcc	.-70     	; 0xe36 <GLCD_ClrLine+0x10a>
			if(x1>=x2)	x = x1 - (y-y1)*(x1-x2)/(y2-y1);
			else x = x1 + (y-y1)*(x2-x1)/(y2-y1);
			GLCD_ClrPixel(x,y);
		}	
	}
}
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	bf 90       	pop	r11
     e8e:	af 90       	pop	r10
     e90:	9f 90       	pop	r9
     e92:	8f 90       	pop	r8
     e94:	7f 90       	pop	r7
     e96:	6f 90       	pop	r6
     e98:	08 95       	ret

00000e9a <GLCD_PutNum>:


// GLCD put number
int GLCD_PutNum(unsigned char x,unsigned char y, unsigned int num)
{
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	d8 2e       	mov	r13, r24
     ea6:	16 2f       	mov	r17, r22
     ea8:	7a 01       	movw	r14, r20
    int a,b;
        	a=num/1000 ;
        	GLCD_PutChar78(x,y,a+0x030);
     eaa:	ca 01       	movw	r24, r20
     eac:	68 ee       	ldi	r22, 0xE8	; 232
     eae:	73 e0       	ldi	r23, 0x03	; 3
     eb0:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__udivmodhi4>
     eb4:	46 2f       	mov	r20, r22
     eb6:	40 5d       	subi	r20, 0xD0	; 208
     eb8:	8d 2d       	mov	r24, r13
     eba:	61 2f       	mov	r22, r17
     ebc:	0e 94 c7 04 	call	0x98e	; 0x98e <GLCD_PutChar78>
        	b=num%1000;
     ec0:	c7 01       	movw	r24, r14
     ec2:	68 ee       	ldi	r22, 0xE8	; 232
     ec4:	73 e0       	ldi	r23, 0x03	; 3
     ec6:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__udivmodhi4>
     eca:	08 2f       	mov	r16, r24
     ecc:	f9 2e       	mov	r15, r25
			a=b/100;
        	GLCD_PutChar78(x,y+8,a+0x030);
     ece:	18 5f       	subi	r17, 0xF8	; 248
     ed0:	64 e6       	ldi	r22, 0x64	; 100
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodhi4>
     ed8:	46 2f       	mov	r20, r22
     eda:	40 5d       	subi	r20, 0xD0	; 208
     edc:	8d 2d       	mov	r24, r13
     ede:	61 2f       	mov	r22, r17
     ee0:	0e 94 c7 04 	call	0x98e	; 0x98e <GLCD_PutChar78>
			a=b%100;
     ee4:	80 2f       	mov	r24, r16
     ee6:	9f 2d       	mov	r25, r15
     ee8:	64 e6       	ldi	r22, 0x64	; 100
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodhi4>
     ef0:	08 2f       	mov	r16, r24
     ef2:	f9 2e       	mov	r15, r25
			b=a/10;
			GLCD_PutChar78(x,y+16,b+0x030);
     ef4:	18 5f       	subi	r17, 0xF8	; 248
     ef6:	6a e0       	ldi	r22, 0x0A	; 10
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodhi4>
     efe:	46 2f       	mov	r20, r22
     f00:	40 5d       	subi	r20, 0xD0	; 208
     f02:	8d 2d       	mov	r24, r13
     f04:	61 2f       	mov	r22, r17
     f06:	0e 94 c7 04 	call	0x98e	; 0x98e <GLCD_PutChar78>
			b=a%10;
			GLCD_PutChar78(x,y+24,b+0x30);
     f0a:	18 5f       	subi	r17, 0xF8	; 248
     f0c:	80 2f       	mov	r24, r16
     f0e:	9f 2d       	mov	r25, r15
     f10:	6a e0       	ldi	r22, 0x0A	; 10
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodhi4>
     f18:	48 2f       	mov	r20, r24
     f1a:	40 5d       	subi	r20, 0xD0	; 208
     f1c:	8d 2d       	mov	r24, r13
     f1e:	61 2f       	mov	r22, r17
     f20:	0e 94 c7 04 	call	0x98e	; 0x98e <GLCD_PutChar78>

	return 0;
}
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	08 95       	ret

00000f34 <TCS3200_init>:
#define TCS_LEDOn()		TCS_LED_PORT|=(1<<TCS_LED_POS)
#define TCS_LEDOff() 	TCS_LED_PORT&=~(1<<TCS_LED_POS)
void TCS3200_init()
{
	//Initialize S0,S1,S2,S3,!OE,LED are output, OUT (PA0) is input
	DATA_DDR = 0x7E; 
     f34:	8e e7       	ldi	r24, 0x7E	; 126
     f36:	8a bb       	out	0x1a, r24	; 26
		0	0	Power down
		0	1	2%
		1	0	20%
		1	1	100%
	*/
	TCS_S0Low();
     f38:	dc 98       	cbi	0x1b, 4	; 27
	TCS_S1High();
     f3a:	dd 9a       	sbi	0x1b, 5	; 27
	TCS_OELow();
     f3c:	de 98       	cbi	0x1b, 6	; 27
}
     f3e:	08 95       	ret

00000f40 <TCS_SelectRed>:


void TCS_SelectRed()
{
	TCS_S2Low();
     f40:	d9 98       	cbi	0x1b, 1	; 27
	TCS_S3Low();
     f42:	da 98       	cbi	0x1b, 2	; 27
}
     f44:	08 95       	ret

00000f46 <TCS_SelectGreen>:

void TCS_SelectGreen()
{
	TCS_S2High();
     f46:	d9 9a       	sbi	0x1b, 1	; 27
	TCS_S3High();
     f48:	da 9a       	sbi	0x1b, 2	; 27
}
     f4a:	08 95       	ret

00000f4c <TCS_SelectBlue>:

void TCS_SelectBlue()
{
	TCS_S2Low();
     f4c:	d9 98       	cbi	0x1b, 1	; 27
	TCS_S3High();
     f4e:	da 9a       	sbi	0x1b, 2	; 27
}
     f50:	08 95       	ret

00000f52 <TCS_SelectClear>:

void TCS_SelectClear()
{
	TCS_S2High();
     f52:	d9 9a       	sbi	0x1b, 1	; 27
	TCS_S3Low();
     f54:	da 98       	cbi	0x1b, 2	; 27
}
     f56:	08 95       	ret

00000f58 <TCS_Measure>:

unsigned int TCS_Measure()
{
	//If the function is entered when the level on OUT line was low
	//Then wait for it to become high.
	if(!(TCS_OUT_PORT & (1<<TCS_OUT_POS)))
     f58:	c8 99       	sbic	0x19, 0	; 25
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <TCS_Measure+0x8>
	{
		while(!(TCS_OUT_PORT & (1<<TCS_OUT_POS)));	//Wait for rising edge	
     f5c:	c8 9b       	sbis	0x19, 0	; 25
     f5e:	fe cf       	rjmp	.-4      	; 0xf5c <TCS_Measure+0x4>
	}
	
	
	while(TCS_OUT_PORT & (1<<TCS_OUT_POS));	//Wait for falling edge
     f60:	c8 99       	sbic	0x19, 0	; 25
     f62:	fe cf       	rjmp	.-4      	; 0xf60 <TCS_Measure+0x8>
	
	TCNT1=0x0000;		//Reset Counter
     f64:	1d bc       	out	0x2d, r1	; 45
     f66:	1c bc       	out	0x2c, r1	; 44
	
	TCCR1B=(1<<CS10);	//Prescaller = F_CPU/1 (Start Counting)
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	8e bd       	out	0x2e, r24	; 46
	
	while(!(TCS_OUT_PORT & (1<<TCS_OUT_POS)));	//Wait for rising edge
     f6c:	c8 9b       	sbis	0x19, 0	; 25
     f6e:	fe cf       	rjmp	.-4      	; 0xf6c <TCS_Measure+0x14>
	
	//Stop Timer
	TCCR1B=0x00;
     f70:	1e bc       	out	0x2e, r1	; 46
	
	return ((float)F_CPU/(2*TCNT1));
     f72:	6c b5       	in	r22, 0x2c	; 44
     f74:	7d b5       	in	r23, 0x2d	; 45
     f76:	66 0f       	add	r22, r22
     f78:	77 1f       	adc	r23, r23
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__floatunsisf>
     f82:	9b 01       	movw	r18, r22
     f84:	ac 01       	movw	r20, r24
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	74 e2       	ldi	r23, 0x24	; 36
     f8a:	84 ef       	ldi	r24, 0xF4	; 244
     f8c:	9a e4       	ldi	r25, 0x4A	; 74
     f8e:	0e 94 35 0c 	call	0x186a	; 0x186a <__divsf3>
     f92:	0e 94 5f 0a 	call	0x14be	; 0x14be <__fixunssfsi>
	
}
     f96:	cb 01       	movw	r24, r22
     f98:	08 95       	ret

00000f9a <Measure_R>:
//read Red pulse
unsigned int Measure_R()		
{
     f9a:	cf 92       	push	r12
     f9c:	df 92       	push	r13
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
}


void TCS_SelectRed()
{
	TCS_S2Low();
     fa6:	d9 98       	cbi	0x1b, 1	; 27
	TCS_S3Low();
     fa8:	da 98       	cbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     faa:	40 ed       	ldi	r20, 0xD0	; 208
     fac:	e4 2e       	mov	r14, r20
     fae:	47 e0       	ldi	r20, 0x07	; 7
     fb0:	f4 2e       	mov	r15, r20
     fb2:	c7 01       	movw	r24, r14
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <Measure_R+0x1a>
{
	TCS_SelectRed();
	unsigned int r;
	
	_delay_ms(1);
	r=TCS_Measure();	
     fb8:	0e 94 ac 07 	call	0xf58	; 0xf58 <TCS_Measure>
     fbc:	6c 01       	movw	r12, r24
     fbe:	c7 01       	movw	r24, r14
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <Measure_R+0x26>
	
	_delay_ms(1);
	r+=TCS_Measure();	
     fc4:	0e 94 ac 07 	call	0xf58	; 0xf58 <TCS_Measure>
     fc8:	8c 01       	movw	r16, r24
     fca:	c7 01       	movw	r24, r14
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <Measure_R+0x32>
	
	_delay_ms(1);
	r+=TCS_Measure();
     fd0:	0e 94 ac 07 	call	0xf58	; 0xf58 <TCS_Measure>
	
	_delay_ms(1);
	r=TCS_Measure();	
	
	_delay_ms(1);
	r+=TCS_Measure();	
     fd4:	0c 0d       	add	r16, r12
     fd6:	1d 1d       	adc	r17, r13
     fd8:	80 0f       	add	r24, r16
     fda:	91 1f       	adc	r25, r17
     fdc:	63 e0       	ldi	r22, 0x03	; 3
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__udivmodhi4>
     fe4:	cb 01       	movw	r24, r22
	_delay_ms(1);
	r+=TCS_Measure();
	
	return r/3;
	
}
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ff 90       	pop	r15
     fec:	ef 90       	pop	r14
     fee:	df 90       	pop	r13
     ff0:	cf 90       	pop	r12
     ff2:	08 95       	ret

00000ff4 <Measure_G>:

//read green pulse
unsigned int Measure_G()
{
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
	TCS_S3Low();
}

void TCS_SelectGreen()
{
	TCS_S2High();
    1004:	d9 9a       	sbi	0x1b, 1	; 27
	TCS_S3High();
    1006:	da 9a       	sbi	0x1b, 2	; 27
    1008:	50 ed       	ldi	r21, 0xD0	; 208
    100a:	c5 2e       	mov	r12, r21
    100c:	57 e0       	ldi	r21, 0x07	; 7
    100e:	d5 2e       	mov	r13, r21
    1010:	c6 01       	movw	r24, r12
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <Measure_G+0x1e>
{
	TCS_SelectGreen();
	unsigned int r;
	
	_delay_ms(1);
	r=TCS_Measure();	
    1016:	0e 94 ac 07 	call	0xf58	; 0xf58 <TCS_Measure>
    101a:	5c 01       	movw	r10, r24
    101c:	c6 01       	movw	r24, r12
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <Measure_G+0x2a>
	
	_delay_ms(1);
	r+=TCS_Measure();	
    1022:	0e 94 ac 07 	call	0xf58	; 0xf58 <TCS_Measure>
    1026:	7c 01       	movw	r14, r24
    1028:	c6 01       	movw	r24, r12
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <Measure_G+0x36>
	
	_delay_ms(1);
	r+=TCS_Measure();
    102e:	0e 94 ac 07 	call	0xf58	; 0xf58 <TCS_Measure>
	
	_delay_ms(1);
	r=TCS_Measure();	
	
	_delay_ms(1);
	r+=TCS_Measure();	
    1032:	ea 0c       	add	r14, r10
    1034:	fb 1c       	adc	r15, r11
    1036:	e8 0e       	add	r14, r24
    1038:	f9 1e       	adc	r15, r25
    103a:	00 e0       	ldi	r16, 0x00	; 0
    103c:	10 e0       	ldi	r17, 0x00	; 0
    103e:	c8 01       	movw	r24, r16
    1040:	b7 01       	movw	r22, r14
    1042:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__floatunsisf>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e2       	ldi	r20, 0x20	; 32
    104c:	50 e4       	ldi	r21, 0x40	; 64
    104e:	0e 94 35 0c 	call	0x186a	; 0x186a <__divsf3>
    1052:	0e 94 5f 0a 	call	0x14be	; 0x14be <__fixunssfsi>
	_delay_ms(1);
	r+=TCS_Measure();
	
	return r/2.5;
	
}
    1056:	cb 01       	movw	r24, r22
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	ff 90       	pop	r15
    105e:	ef 90       	pop	r14
    1060:	df 90       	pop	r13
    1062:	cf 90       	pop	r12
    1064:	bf 90       	pop	r11
    1066:	af 90       	pop	r10
    1068:	08 95       	ret

0000106a <Measure_B>:

//read blue pulse
unsigned int Measure_B()
{
    106a:	cf 92       	push	r12
    106c:	df 92       	push	r13
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
	TCS_S3High();
}

void TCS_SelectBlue()
{
	TCS_S2Low();
    1076:	d9 98       	cbi	0x1b, 1	; 27
	TCS_S3High();
    1078:	da 9a       	sbi	0x1b, 2	; 27
    107a:	60 ed       	ldi	r22, 0xD0	; 208
    107c:	e6 2e       	mov	r14, r22
    107e:	67 e0       	ldi	r22, 0x07	; 7
    1080:	f6 2e       	mov	r15, r22
    1082:	c7 01       	movw	r24, r14
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <Measure_B+0x1a>
{
	TCS_SelectBlue();
	unsigned int r;
	
	_delay_ms(1);
	r=TCS_Measure();	
    1088:	0e 94 ac 07 	call	0xf58	; 0xf58 <TCS_Measure>
    108c:	6c 01       	movw	r12, r24
    108e:	c7 01       	movw	r24, r14
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <Measure_B+0x26>
	
	_delay_ms(1);
	r+=TCS_Measure();	
    1094:	0e 94 ac 07 	call	0xf58	; 0xf58 <TCS_Measure>
    1098:	8c 01       	movw	r16, r24
    109a:	c7 01       	movw	r24, r14
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <Measure_B+0x32>
	
	_delay_ms(1);
	r+=TCS_Measure();
    10a0:	0e 94 ac 07 	call	0xf58	; 0xf58 <TCS_Measure>
	
	_delay_ms(1);
	r=TCS_Measure();	
	
	_delay_ms(1);
	r+=TCS_Measure();	
    10a4:	0c 0d       	add	r16, r12
    10a6:	1d 1d       	adc	r17, r13
    10a8:	80 0f       	add	r24, r16
    10aa:	91 1f       	adc	r25, r17
    10ac:	63 e0       	ldi	r22, 0x03	; 3
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__udivmodhi4>
    10b4:	cb 01       	movw	r24, r22
	_delay_ms(1);
	r+=TCS_Measure();
	
	return r/3;
	
}
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	df 90       	pop	r13
    10c0:	cf 90       	pop	r12
    10c2:	08 95       	ret

000010c4 <Measure_C>:
unsigned int Measure_C()
{
    10c4:	cf 92       	push	r12
    10c6:	df 92       	push	r13
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
	TCS_S3High();
}

void TCS_SelectClear()
{
	TCS_S2High();
    10d0:	d9 9a       	sbi	0x1b, 1	; 27
	TCS_S3Low();
    10d2:	da 98       	cbi	0x1b, 2	; 27
    10d4:	70 ed       	ldi	r23, 0xD0	; 208
    10d6:	e7 2e       	mov	r14, r23
    10d8:	77 e0       	ldi	r23, 0x07	; 7
    10da:	f7 2e       	mov	r15, r23
    10dc:	c7 01       	movw	r24, r14
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <Measure_C+0x1a>
{
	TCS_SelectClear();
	unsigned int r;
	
	_delay_ms(1);
	r=TCS_Measure();	
    10e2:	0e 94 ac 07 	call	0xf58	; 0xf58 <TCS_Measure>
    10e6:	6c 01       	movw	r12, r24
    10e8:	c7 01       	movw	r24, r14
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <Measure_C+0x26>
	
	_delay_ms(1);
	r+=TCS_Measure();	
    10ee:	0e 94 ac 07 	call	0xf58	; 0xf58 <TCS_Measure>
    10f2:	8c 01       	movw	r16, r24
    10f4:	c7 01       	movw	r24, r14
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <Measure_C+0x32>
	
	_delay_ms(1);
	r+=TCS_Measure();
    10fa:	0e 94 ac 07 	call	0xf58	; 0xf58 <TCS_Measure>
	
	_delay_ms(1);
	r=TCS_Measure();	
	
	_delay_ms(1);
	r+=TCS_Measure();	
    10fe:	0c 0d       	add	r16, r12
    1100:	1d 1d       	adc	r17, r13
    1102:	80 0f       	add	r24, r16
    1104:	91 1f       	adc	r25, r17
    1106:	63 e0       	ldi	r22, 0x03	; 3
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__udivmodhi4>
    110e:	cb 01       	movw	r24, r22
	
	_delay_ms(1);
	r+=TCS_Measure();
	
	return r/3;	
}
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	df 90       	pop	r13
    111a:	cf 90       	pop	r12
    111c:	08 95       	ret

0000111e <__vector_11>:
unsigned char count=0;  //global variable to count for genarating 1kHz pulse
char color=0,color_pre=0;
void Clear();


ISR (TIMER0_OVF_vect){
    111e:	1f 92       	push	r1
    1120:	0f 92       	push	r0
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	0f 92       	push	r0
    1126:	11 24       	eor	r1, r1
    1128:	8f 93       	push	r24
    112a:	9f 93       	push	r25
	TCNT0=-100;
    112c:	8c e9       	ldi	r24, 0x9C	; 156
    112e:	82 bf       	out	0x32, r24	; 50
	count++;
    1130:	80 91 10 02 	lds	r24, 0x0210
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	80 93 10 02 	sts	0x0210, r24
	if (count==5)
    113a:	85 30       	cpi	r24, 0x05	; 5
    113c:	21 f4       	brne	.+8      	; 0x1146 <__vector_11+0x28>
		Buzzer ^=0x02;		//create pulse 1kHz at PC1
    113e:	85 b3       	in	r24, 0x15	; 21
    1140:	92 e0       	ldi	r25, 0x02	; 2
    1142:	89 27       	eor	r24, r25
    1144:	85 bb       	out	0x15, r24	; 21
}
    1146:	9f 91       	pop	r25
    1148:	8f 91       	pop	r24
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	0f 90       	pop	r0
    1150:	1f 90       	pop	r1
    1152:	18 95       	reti

00001154 <Clear>:
if color is change, it will call GLCD_Clr() to clear all screen
pre_color and color are the variable to check
*/
void Clear()
{
	if (color!= color_pre){
    1154:	90 91 11 02 	lds	r25, 0x0211
    1158:	80 91 12 02 	lds	r24, 0x0212
    115c:	98 17       	cp	r25, r24
    115e:	31 f0       	breq	.+12     	; 0x116c <Clear+0x18>
		GLCD_Clr();
    1160:	0e 94 a4 04 	call	0x948	; 0x948 <GLCD_Clr>
		color_pre=color;
    1164:	80 91 11 02 	lds	r24, 0x0211
    1168:	80 93 12 02 	sts	0x0212, r24
    116c:	08 95       	ret

0000116e <main>:
	if (count==5)
		Buzzer ^=0x02;		//create pulse 1kHz at PC1
}

int main(void)
{
    116e:	2f 92       	push	r2
    1170:	3f 92       	push	r3
    1172:	4f 92       	push	r4
    1174:	5f 92       	push	r5
    1176:	6f 92       	push	r6
    1178:	7f 92       	push	r7
    117a:	8f 92       	push	r8
    117c:	9f 92       	push	r9
    117e:	af 92       	push	r10
    1180:	bf 92       	push	r11
    1182:	cf 92       	push	r12
    1184:	df 92       	push	r13
    1186:	ef 92       	push	r14
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
	//declare variable
	unsigned int r=0,g=0,b=0,_r,_g,_b,wb=0,c=0;	
	unsigned char stt=0,pre=0;
    //Initialize the GLCD Library
    GLCD_Init();
    1192:	0e 94 66 04 	call	0x8cc	; 0x8cc <GLCD_Init>
	GLCD_Clr();	
    1196:	0e 94 a4 04 	call	0x948	; 0x948 <GLCD_Clr>

	//Put my bitmap to GLCD
	
	GLCD_PutBMP(hiGLCD);	
    119a:	84 e5       	ldi	r24, 0x54	; 84
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 44 05 	call	0xa88	; 0xa88 <GLCD_PutBMP>
    11a2:	80 e3       	ldi	r24, 0x30	; 48
    11a4:	95 e7       	ldi	r25, 0x75	; 117
    11a6:	28 ec       	ldi	r18, 0xC8	; 200
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	f9 01       	movw	r30, r18
    11ac:	31 97       	sbiw	r30, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <main+0x3e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b2:	d9 f7       	brne	.-10     	; 0x11aa <main+0x3c>
	_delay_ms(3000);
	
    GLCD_Clr();				//clear GLCD
    11b4:	0e 94 a4 04 	call	0x948	; 0x948 <GLCD_Clr>
	//Initialize TCS Library
	TCS3200_init();			
    11b8:	0e 94 9a 07 	call	0xf34	; 0xf34 <TCS3200_init>
	
	//Initialize Timer0 
	TIMSK= (1<<TOIE0)|(1<<TOIE1);	//enable timer0,timer1
    11bc:	85 e0       	ldi	r24, 0x05	; 5
    11be:	89 bf       	out	0x39, r24	; 57
	
	TCNT0=-100;			//recalculate if crystal is changes
    11c0:	8c e9       	ldi	r24, 0x9C	; 156
    11c2:	82 bf       	out	0x32, r24	; 50
	/* 1kHz => T = 1ms -> half pulse is 0.5ms
	TCNT0 = 100 => 100*8/8MHz = 0.1ms 
	--> 0.5ms = 5* 0.1ms
	*/
	//Buzzer Pin PC1 as output and Button pin PC0 as input and pullup
	PORTC = 0x03;	
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	85 bb       	out	0x15, r24	; 21
	DDRC=~(1<<PC0)|(1<<1);			
    11c8:	8e ef       	ldi	r24, 0xFE	; 254
    11ca:	84 bb       	out	0x14, r24	; 20
	sei();					//enable global interrupts
    11cc:	78 94       	sei
    11ce:	77 24       	eor	r7, r7
    11d0:	99 24       	eor	r9, r9
    11d2:	18 ec       	ldi	r17, 0xC8	; 200
    11d4:	41 2e       	mov	r4, r17
    11d6:	51 2c       	mov	r5, r1
				GLCD_Print78(4,1," Buzzer is ON");
			}
		}
		else
		{
			color=9;
    11d8:	b9 e0       	ldi	r27, 0x09	; 9
    11da:	2b 2e       	mov	r2, r27
				GLCD_Print78(0,0,"Oooppp!!!");
				GLCD_Print78(2,10,"Unknown color");
				pre=0;
				}
			if (stt==1){		//if color is black,enable timer0 and 1KHz to buzzer
				TCCR0=0x02;		//TIMER0 INTERNAL CLOCK, PRESCALER/8
    11dc:	a2 e0       	ldi	r26, 0x02	; 2
    11de:	6a 2e       	mov	r6, r26
				Clear();
				GLCD_Print78(2,0,"Color is Yellow");
				pre=0;
			}
			else if ((b>g)&(b>=15)&(r==10)){	//determine Blue
				color = 3;
    11e0:	f3 e0       	ldi	r31, 0x03	; 3
    11e2:	3f 2e       	mov	r3, r31
	--> 0.5ms = 5* 0.1ms
	*/
	//Buzzer Pin PC1 as output and Button pin PC0 as input and pullup
	PORTC = 0x03;	
	DDRC=~(1<<PC0)|(1<<1);			
	sei();					//enable global interrupts
    11e4:	88 e8       	ldi	r24, 0x88	; 136
    11e6:	93 e1       	ldi	r25, 0x13	; 19
    11e8:	f2 01       	movw	r30, r4
    11ea:	31 97       	sbiw	r30, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <main+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f0:	d9 f7       	brne	.-10     	; 0x11e8 <main+0x7a>
	while(1)
	{		
		_delay_ms(500);		

		TCS_LEDOn();		//turn on LED
    11f2:	db 9a       	sbi	0x1b, 3	; 27
		_r=Measure_R();		//measure frequency with red filter
    11f4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <Measure_R>
    11f8:	6c 01       	movw	r12, r24
		_g=Measure_G();		//measure frequency with green filter
    11fa:	0e 94 fa 07 	call	0xff4	; 0xff4 <Measure_G>
    11fe:	7c 01       	movw	r14, r24
		_b=Measure_B();		//measure frequency with blue filter	
    1200:	0e 94 35 08 	call	0x106a	; 0x106a <Measure_B>
    1204:	5c 01       	movw	r10, r24

		c=Measure_C();		//measure frequency without filter
    1206:	0e 94 62 08 	call	0x10c4	; 0x10c4 <Measure_C>
		TCS_LEDOff();		//turn off LED	
    120a:	db 98       	cbi	0x1b, 3	; 27

		//Find the smallest value in RGB -> scale the RGB value to determine color
		if (c>2100){
    120c:	85 53       	subi	r24, 0x35	; 53
    120e:	98 40       	sbci	r25, 0x08	; 8
    1210:	08 f4       	brcc	.+2      	; 0x1214 <main+0xa6>
    1212:	36 c1       	rjmp	.+620    	; 0x1480 <main+0x312>
			
			if(_r<_b)
    1214:	ca 14       	cp	r12, r10
    1216:	db 04       	cpc	r13, r11
    1218:	30 f4       	brcc	.+12     	; 0x1226 <main+0xb8>
    121a:	c7 01       	movw	r24, r14
    121c:	ce 14       	cp	r12, r14
    121e:	df 04       	cpc	r13, r15
    1220:	38 f4       	brcc	.+14     	; 0x1230 <main+0xc2>
    1222:	c6 01       	movw	r24, r12
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <main+0xc2>
    1226:	c5 01       	movw	r24, r10
    1228:	ea 14       	cp	r14, r10
    122a:	fb 04       	cpc	r15, r11
    122c:	08 f4       	brcc	.+2      	; 0x1230 <main+0xc2>
    122e:	c7 01       	movw	r24, r14
				if(_b<_g)
					wb=_b;
				else
					wb=_g;	
			}	
			wb=wb/10;
    1230:	6a e0       	ldi	r22, 0x0A	; 10
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__udivmodhi4>
    1238:	8b 01       	movw	r16, r22
			r=_r/wb;	
    123a:	c6 01       	movw	r24, r12
    123c:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__udivmodhi4>
    1240:	eb 01       	movw	r28, r22
			g=_g/wb;
			b=_b/wb;

			if ((wb>250)&(r==10)){		//determine White color
    1242:	88 24       	eor	r8, r8
    1244:	6a 30       	cpi	r22, 0x0A	; 10
    1246:	71 05       	cpc	r23, r1
    1248:	11 f4       	brne	.+4      	; 0x124e <main+0xe0>
    124a:	88 24       	eor	r8, r8
    124c:	83 94       	inc	r8
    124e:	0b 3f       	cpi	r16, 0xFB	; 251
    1250:	11 05       	cpc	r17, r1
    1252:	60 f0       	brcs	.+24     	; 0x126c <main+0xfe>
    1254:	88 20       	and	r8, r8
    1256:	51 f0       	breq	.+20     	; 0x126c <main+0xfe>
				color = 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 93 11 02 	sts	0x0211, r24
				Clear();
    125e:	0e 94 aa 08 	call	0x1154	; 0x1154 <Clear>
				GLCD_Print78(2,0,"Color is White");
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	40 e6       	ldi	r20, 0x60	; 96
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	fa c0       	rjmp	.+500    	; 0x1460 <main+0x2f2>
				else
					wb=_g;	
			}	
			wb=wb/10;
			r=_r/wb;	
			g=_g/wb;
    126c:	c7 01       	movw	r24, r14
    126e:	b8 01       	movw	r22, r16
    1270:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__udivmodhi4>
    1274:	fb 01       	movw	r30, r22
			b=_b/wb;
    1276:	c5 01       	movw	r24, r10
    1278:	b8 01       	movw	r22, r16
    127a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__udivmodhi4>
    127e:	9b 01       	movw	r18, r22
				color = 1;
				Clear();
				GLCD_Print78(2,0,"Color is White");
				pre=0;
			}
			else if ((r>14)&(g>b)&(b==10)){			//determine Yellow
    1280:	a0 e0       	ldi	r26, 0x00	; 0
    1282:	6e 17       	cp	r22, r30
    1284:	7f 07       	cpc	r23, r31
    1286:	08 f4       	brcc	.+2      	; 0x128a <main+0x11c>
    1288:	a1 e0       	ldi	r26, 0x01	; 1
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	2a 30       	cpi	r18, 0x0A	; 10
    1290:	31 05       	cpc	r19, r1
    1292:	11 f4       	brne	.+4      	; 0x1298 <main+0x12a>
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	cf 30       	cpi	r28, 0x0F	; 15
    129c:	d1 05       	cpc	r29, r1
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <main+0x134>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	8a 23       	and	r24, r26
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	86 23       	and	r24, r22
    12a8:	97 23       	and	r25, r23
    12aa:	89 2b       	or	r24, r25
    12ac:	49 f0       	breq	.+18     	; 0x12c0 <main+0x152>
				color = 2;
    12ae:	60 92 11 02 	sts	0x0211, r6
				Clear();
    12b2:	0e 94 aa 08 	call	0x1154	; 0x1154 <Clear>
				GLCD_Print78(2,0,"Color is Yellow");
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	4f e6       	ldi	r20, 0x6F	; 111
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	d0 c0       	rjmp	.+416    	; 0x1460 <main+0x2f2>
				pre=0;
			}
			else if ((b>g)&(b>=15)&(r==10)){	//determine Blue
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e2 17       	cp	r30, r18
    12c4:	f3 07       	cpc	r31, r19
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <main+0x15c>
    12c8:	b1 e0       	ldi	r27, 0x01	; 1
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	2f 30       	cpi	r18, 0x0F	; 15
    12ce:	31 05       	cpc	r19, r1
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <main+0x166>
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	8b 23       	and	r24, r27
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	ca 30       	cpi	r28, 0x0A	; 10
    12de:	d1 05       	cpc	r29, r1
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <main+0x178>
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	84 23       	and	r24, r20
    12e8:	95 23       	and	r25, r21
    12ea:	89 2b       	or	r24, r25
    12ec:	49 f0       	breq	.+18     	; 0x1300 <main+0x192>
				color = 3;
    12ee:	30 92 11 02 	sts	0x0211, r3
				Clear();
    12f2:	0e 94 aa 08 	call	0x1154	; 0x1154 <Clear>
				GLCD_Print78(2,5,"Color is Blue");
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	65 e0       	ldi	r22, 0x05	; 5
    12fa:	4f e7       	ldi	r20, 0x7F	; 127
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	b0 c0       	rjmp	.+352    	; 0x1460 <main+0x2f2>
				pre=0;
			}
			else if ((r>b)&(g==10)&(b==10)){	//determine Red
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	ea 30       	cpi	r30, 0x0A	; 10
    1304:	f1 05       	cpc	r31, r1
    1306:	09 f4       	brne	.+2      	; 0x130a <main+0x19c>
    1308:	41 e0       	ldi	r20, 0x01	; 1
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	2c 17       	cp	r18, r28
    130e:	3d 07       	cpc	r19, r29
    1310:	08 f4       	brcc	.+2      	; 0x1314 <main+0x1a6>
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	84 23       	and	r24, r20
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	86 23       	and	r24, r22
    131a:	97 23       	and	r25, r23
    131c:	89 2b       	or	r24, r25
    131e:	51 f0       	breq	.+20     	; 0x1334 <main+0x1c6>
				color = 4;
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	80 93 11 02 	sts	0x0211, r24
				Clear();
    1326:	0e 94 aa 08 	call	0x1154	; 0x1154 <Clear>
				GLCD_Print78(2,10,"Color is Red");
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	6a e0       	ldi	r22, 0x0A	; 10
    132e:	4d e8       	ldi	r20, 0x8D	; 141
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	96 c0       	rjmp	.+300    	; 0x1460 <main+0x2f2>
				pre=0;		
			}
			else if ((g>b)&(g>r)&(_r>80)){		//determine Green
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	ce 17       	cp	r28, r30
    1338:	df 07       	cpc	r29, r31
    133a:	08 f4       	brcc	.+2      	; 0x133e <main+0x1d0>
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	a8 23       	and	r26, r24
    1340:	8a 2f       	mov	r24, r26
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	51 e5       	ldi	r21, 0x51	; 81
    134a:	c5 16       	cp	r12, r21
    134c:	d1 04       	cpc	r13, r1
    134e:	10 f0       	brcs	.+4      	; 0x1354 <main+0x1e6>
    1350:	21 e0       	ldi	r18, 0x01	; 1
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	82 23       	and	r24, r18
    1356:	93 23       	and	r25, r19
    1358:	89 2b       	or	r24, r25
    135a:	51 f0       	breq	.+20     	; 0x1370 <main+0x202>
				color = 5;
    135c:	85 e0       	ldi	r24, 0x05	; 5
    135e:	80 93 11 02 	sts	0x0211, r24
				Clear();
    1362:	0e 94 aa 08 	call	0x1154	; 0x1154 <Clear>
				GLCD_Print78(2,0,"Color is Green");
    1366:	82 e0       	ldi	r24, 0x02	; 2
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	4a e9       	ldi	r20, 0x9A	; 154
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	78 c0       	rjmp	.+240    	; 0x1460 <main+0x2f2>
				pre=0;
			}
			else if ((b>g)&(r==10)&(g==11)&(wb<150)){  //determine purple
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3b 97       	sbiw	r30, 0x0b	; 11
    1376:	11 f4       	brne	.+4      	; 0x137c <main+0x20e>
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	06 39       	cpi	r16, 0x96	; 150
    1382:	11 05       	cpc	r17, r1
    1384:	10 f4       	brcc	.+4      	; 0x138a <main+0x21c>
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	28 23       	and	r18, r24
    138c:	39 23       	and	r19, r25
    138e:	b8 21       	and	r27, r8
    1390:	8b 2f       	mov	r24, r27
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	28 23       	and	r18, r24
    1396:	39 23       	and	r19, r25
    1398:	23 2b       	or	r18, r19
    139a:	51 f0       	breq	.+20     	; 0x13b0 <main+0x242>
				color = 6;
    139c:	86 e0       	ldi	r24, 0x06	; 6
    139e:	80 93 11 02 	sts	0x0211, r24
				Clear();
    13a2:	0e 94 aa 08 	call	0x1154	; 0x1154 <Clear>
				GLCD_Print78(2,0,"Color is Purple ");
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	49 ea       	ldi	r20, 0xA9	; 169
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	58 c0       	rjmp	.+176    	; 0x1460 <main+0x2f2>
				pre=0;
			}
			else if ((r==10)&(g==10)&(b==10)&(_r<1000)&(_b<1000)&(wb>82)){	//determine black
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	58 ee       	ldi	r21, 0xE8	; 232
    13b6:	a5 16       	cp	r10, r21
    13b8:	53 e0       	ldi	r21, 0x03	; 3
    13ba:	b5 06       	cpc	r11, r21
    13bc:	10 f4       	brcc	.+4      	; 0x13c2 <main+0x254>
    13be:	21 e0       	ldi	r18, 0x01	; 1
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	58 ee       	ldi	r21, 0xE8	; 232
    13c8:	c5 16       	cp	r12, r21
    13ca:	53 e0       	ldi	r21, 0x03	; 3
    13cc:	d5 06       	cpc	r13, r21
    13ce:	10 f4       	brcc	.+4      	; 0x13d4 <main+0x266>
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	28 23       	and	r18, r24
    13d6:	39 23       	and	r19, r25
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	03 35       	cpi	r16, 0x53	; 83
    13de:	11 05       	cpc	r17, r1
    13e0:	10 f0       	brcs	.+4      	; 0x13e6 <main+0x278>
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	28 23       	and	r18, r24
    13e8:	39 23       	and	r19, r25
    13ea:	26 23       	and	r18, r22
    13ec:	37 23       	and	r19, r23
    13ee:	84 22       	and	r8, r20
    13f0:	88 2d       	mov	r24, r8
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	28 23       	and	r18, r24
    13f6:	39 23       	and	r19, r25
    13f8:	23 2b       	or	r18, r19
    13fa:	19 f1       	breq	.+70     	; 0x1442 <main+0x2d4>
				color = 7;
    13fc:	87 e0       	ldi	r24, 0x07	; 7
    13fe:	80 93 11 02 	sts	0x0211, r24
				Clear();
    1402:	0e 94 aa 08 	call	0x1154	; 0x1154 <Clear>
				GLCD_Print78(0,5,"Color is Black");
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	65 e0       	ldi	r22, 0x05	; 5
    140a:	4a eb       	ldi	r20, 0xBA	; 186
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	0e 94 24 05 	call	0xa48	; 0xa48 <GLCD_Print78>
    1412:	88 ee       	ldi	r24, 0xE8	; 232
    1414:	93 e0       	ldi	r25, 0x03	; 3
    1416:	f2 01       	movw	r30, r4
    1418:	31 97       	sbiw	r30, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <main+0x2aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141e:	d9 f7       	brne	.-10     	; 0x1416 <main+0x2a8>
				_delay_ms(100);
				if ((stt==0)&(pre==0)) stt=1;
    1420:	77 20       	and	r7, r7
    1422:	29 f4       	brne	.+10     	; 0x142e <main+0x2c0>
    1424:	99 20       	and	r9, r9
    1426:	c1 f5       	brne	.+112    	; 0x1498 <main+0x32a>
    1428:	77 24       	eor	r7, r7
    142a:	73 94       	inc	r7
    142c:	1f c0       	rjmp	.+62     	; 0x146c <main+0x2fe>
				else if (stt==2){
    142e:	22 e0       	ldi	r18, 0x02	; 2
    1430:	72 16       	cp	r7, r18
    1432:	c9 f4       	brne	.+50     	; 0x1466 <main+0x2f8>
					GLCD_Print78(2,1," Buzzer is OFF");
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	61 e0       	ldi	r22, 0x01	; 1
    1438:	49 ec       	ldi	r20, 0xC9	; 201
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	0e 94 24 05 	call	0xa48	; 0xa48 <GLCD_Print78>
    1440:	2b c0       	rjmp	.+86     	; 0x1498 <main+0x32a>
				}
			}

			else {
				color = 8;
    1442:	58 e0       	ldi	r21, 0x08	; 8
    1444:	50 93 11 02 	sts	0x0211, r21
				Clear();
    1448:	0e 94 aa 08 	call	0x1154	; 0x1154 <Clear>
				GLCD_Print78(0,0,"Oooppp!!!");
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	48 ed       	ldi	r20, 0xD8	; 216
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	0e 94 24 05 	call	0xa48	; 0xa48 <GLCD_Print78>
				GLCD_Print78(2,10,"Unknown color");
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	6a e0       	ldi	r22, 0x0A	; 10
    145c:	42 ee       	ldi	r20, 0xE2	; 226
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	0e 94 24 05 	call	0xa48	; 0xa48 <GLCD_Print78>
    1464:	99 24       	eor	r9, r9
				pre=0;
				}
			if (stt==1){		//if color is black,enable timer0 and 1KHz to buzzer
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	78 16       	cp	r7, r24
    146a:	b1 f4       	brne	.+44     	; 0x1498 <main+0x32a>
				TCCR0=0x02;		//TIMER0 INTERNAL CLOCK, PRESCALER/8
    146c:	63 be       	out	0x33, r6	; 51
				pre=1;
				GLCD_Print78(4,1," Buzzer is ON");
    146e:	84 e0       	ldi	r24, 0x04	; 4
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	40 ef       	ldi	r20, 0xF0	; 240
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	0e 94 24 05 	call	0xa48	; 0xa48 <GLCD_Print78>
    147a:	99 24       	eor	r9, r9
    147c:	93 94       	inc	r9
    147e:	12 c0       	rjmp	.+36     	; 0x14a4 <main+0x336>
			}
		}
		else
		{
			color=9;
    1480:	20 92 11 02 	sts	0x0211, r2
			Clear();
    1484:	0e 94 aa 08 	call	0x1154	; 0x1154 <Clear>
			GLCD_Print78(0,10,"No Object");	
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	6a e0       	ldi	r22, 0x0A	; 10
    148c:	4e ef       	ldi	r20, 0xFE	; 254
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	0e 94 24 05 	call	0xa48	; 0xa48 <GLCD_Print78>
    1494:	99 24       	eor	r9, r9
    1496:	02 c0       	rjmp	.+4      	; 0x149c <main+0x32e>
			pre=0;
		}
		if ((pre==0 )&(stt==2)) stt = 0;	//reset status of buzzer plays when color is black
    1498:	99 20       	and	r9, r9
    149a:	21 f4       	brne	.+8      	; 0x14a4 <main+0x336>
    149c:	22 e0       	ldi	r18, 0x02	; 2
    149e:	72 16       	cp	r7, r18
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <main+0x336>
    14a2:	77 24       	eor	r7, r7
		if (bit_is_clear(PINC,0)&(stt==1)) {		//stop buzzer if button is pressed
    14a4:	98 99       	sbic	0x13, 0	; 19
    14a6:	9e ce       	rjmp	.-708    	; 0x11e4 <main+0x76>
    14a8:	51 e0       	ldi	r21, 0x01	; 1
    14aa:	75 16       	cp	r7, r21
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <main+0x342>
    14ae:	9a ce       	rjmp	.-716    	; 0x11e4 <main+0x76>
			stt =2;
			TCCR0=0;		//stop timer0
    14b0:	13 be       	out	0x33, r1	; 51
			PORTC=(1<<1)|(1<<0);
    14b2:	35 ba       	out	0x15, r3	; 21
			GLCD_Clr();
    14b4:	0e 94 a4 04 	call	0x948	; 0x948 <GLCD_Clr>
    14b8:	e2 e0       	ldi	r30, 0x02	; 2
    14ba:	7e 2e       	mov	r7, r30
    14bc:	93 ce       	rjmp	.-730    	; 0x11e4 <main+0x76>

000014be <__fixunssfsi>:
    14be:	ef 92       	push	r14
    14c0:	ff 92       	push	r15
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	7b 01       	movw	r14, r22
    14c8:	8c 01       	movw	r16, r24
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	5f e4       	ldi	r21, 0x4F	; 79
    14d2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__gesf2>
    14d6:	88 23       	and	r24, r24
    14d8:	8c f0       	brlt	.+34     	; 0x14fc <__fixunssfsi+0x3e>
    14da:	c8 01       	movw	r24, r16
    14dc:	b7 01       	movw	r22, r14
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	5f e4       	ldi	r21, 0x4F	; 79
    14e6:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__subsf3>
    14ea:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__fixsfsi>
    14ee:	9b 01       	movw	r18, r22
    14f0:	ac 01       	movw	r20, r24
    14f2:	20 50       	subi	r18, 0x00	; 0
    14f4:	30 40       	sbci	r19, 0x00	; 0
    14f6:	40 40       	sbci	r20, 0x00	; 0
    14f8:	50 48       	sbci	r21, 0x80	; 128
    14fa:	06 c0       	rjmp	.+12     	; 0x1508 <__fixunssfsi+0x4a>
    14fc:	c8 01       	movw	r24, r16
    14fe:	b7 01       	movw	r22, r14
    1500:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__fixsfsi>
    1504:	9b 01       	movw	r18, r22
    1506:	ac 01       	movw	r20, r24
    1508:	b9 01       	movw	r22, r18
    150a:	ca 01       	movw	r24, r20
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	ff 90       	pop	r15
    1512:	ef 90       	pop	r14
    1514:	08 95       	ret

00001516 <_fpadd_parts>:
    1516:	a0 e0       	ldi	r26, 0x00	; 0
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e1 e9       	ldi	r30, 0x91	; 145
    151c:	fa e0       	ldi	r31, 0x0A	; 10
    151e:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__prologue_saves__>
    1522:	dc 01       	movw	r26, r24
    1524:	2b 01       	movw	r4, r22
    1526:	fa 01       	movw	r30, r20
    1528:	9c 91       	ld	r25, X
    152a:	92 30       	cpi	r25, 0x02	; 2
    152c:	08 f4       	brcc	.+2      	; 0x1530 <_fpadd_parts+0x1a>
    152e:	39 c1       	rjmp	.+626    	; 0x17a2 <_fpadd_parts+0x28c>
    1530:	eb 01       	movw	r28, r22
    1532:	88 81       	ld	r24, Y
    1534:	82 30       	cpi	r24, 0x02	; 2
    1536:	08 f4       	brcc	.+2      	; 0x153a <_fpadd_parts+0x24>
    1538:	33 c1       	rjmp	.+614    	; 0x17a0 <_fpadd_parts+0x28a>
    153a:	94 30       	cpi	r25, 0x04	; 4
    153c:	69 f4       	brne	.+26     	; 0x1558 <_fpadd_parts+0x42>
    153e:	84 30       	cpi	r24, 0x04	; 4
    1540:	09 f0       	breq	.+2      	; 0x1544 <_fpadd_parts+0x2e>
    1542:	2f c1       	rjmp	.+606    	; 0x17a2 <_fpadd_parts+0x28c>
    1544:	11 96       	adiw	r26, 0x01	; 1
    1546:	9c 91       	ld	r25, X
    1548:	11 97       	sbiw	r26, 0x01	; 1
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	98 17       	cp	r25, r24
    154e:	09 f4       	brne	.+2      	; 0x1552 <_fpadd_parts+0x3c>
    1550:	28 c1       	rjmp	.+592    	; 0x17a2 <_fpadd_parts+0x28c>
    1552:	a8 e0       	ldi	r26, 0x08	; 8
    1554:	b1 e0       	ldi	r27, 0x01	; 1
    1556:	25 c1       	rjmp	.+586    	; 0x17a2 <_fpadd_parts+0x28c>
    1558:	84 30       	cpi	r24, 0x04	; 4
    155a:	09 f4       	brne	.+2      	; 0x155e <_fpadd_parts+0x48>
    155c:	21 c1       	rjmp	.+578    	; 0x17a0 <_fpadd_parts+0x28a>
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	a9 f4       	brne	.+42     	; 0x158c <_fpadd_parts+0x76>
    1562:	92 30       	cpi	r25, 0x02	; 2
    1564:	09 f0       	breq	.+2      	; 0x1568 <_fpadd_parts+0x52>
    1566:	1d c1       	rjmp	.+570    	; 0x17a2 <_fpadd_parts+0x28c>
    1568:	9a 01       	movw	r18, r20
    156a:	ad 01       	movw	r20, r26
    156c:	88 e0       	ldi	r24, 0x08	; 8
    156e:	ea 01       	movw	r28, r20
    1570:	09 90       	ld	r0, Y+
    1572:	ae 01       	movw	r20, r28
    1574:	e9 01       	movw	r28, r18
    1576:	09 92       	st	Y+, r0
    1578:	9e 01       	movw	r18, r28
    157a:	81 50       	subi	r24, 0x01	; 1
    157c:	c1 f7       	brne	.-16     	; 0x156e <_fpadd_parts+0x58>
    157e:	e2 01       	movw	r28, r4
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	11 96       	adiw	r26, 0x01	; 1
    1584:	9c 91       	ld	r25, X
    1586:	89 23       	and	r24, r25
    1588:	81 83       	std	Z+1, r24	; 0x01
    158a:	08 c1       	rjmp	.+528    	; 0x179c <_fpadd_parts+0x286>
    158c:	92 30       	cpi	r25, 0x02	; 2
    158e:	09 f4       	brne	.+2      	; 0x1592 <_fpadd_parts+0x7c>
    1590:	07 c1       	rjmp	.+526    	; 0x17a0 <_fpadd_parts+0x28a>
    1592:	12 96       	adiw	r26, 0x02	; 2
    1594:	2d 90       	ld	r2, X+
    1596:	3c 90       	ld	r3, X
    1598:	13 97       	sbiw	r26, 0x03	; 3
    159a:	eb 01       	movw	r28, r22
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	9b 81       	ldd	r25, Y+3	; 0x03
    15a0:	14 96       	adiw	r26, 0x04	; 4
    15a2:	ad 90       	ld	r10, X+
    15a4:	bd 90       	ld	r11, X+
    15a6:	cd 90       	ld	r12, X+
    15a8:	dc 90       	ld	r13, X
    15aa:	17 97       	sbiw	r26, 0x07	; 7
    15ac:	ec 80       	ldd	r14, Y+4	; 0x04
    15ae:	fd 80       	ldd	r15, Y+5	; 0x05
    15b0:	0e 81       	ldd	r16, Y+6	; 0x06
    15b2:	1f 81       	ldd	r17, Y+7	; 0x07
    15b4:	91 01       	movw	r18, r2
    15b6:	28 1b       	sub	r18, r24
    15b8:	39 0b       	sbc	r19, r25
    15ba:	b9 01       	movw	r22, r18
    15bc:	37 ff       	sbrs	r19, 7
    15be:	04 c0       	rjmp	.+8      	; 0x15c8 <_fpadd_parts+0xb2>
    15c0:	66 27       	eor	r22, r22
    15c2:	77 27       	eor	r23, r23
    15c4:	62 1b       	sub	r22, r18
    15c6:	73 0b       	sbc	r23, r19
    15c8:	60 32       	cpi	r22, 0x20	; 32
    15ca:	71 05       	cpc	r23, r1
    15cc:	0c f0       	brlt	.+2      	; 0x15d0 <_fpadd_parts+0xba>
    15ce:	61 c0       	rjmp	.+194    	; 0x1692 <_fpadd_parts+0x17c>
    15d0:	12 16       	cp	r1, r18
    15d2:	13 06       	cpc	r1, r19
    15d4:	6c f5       	brge	.+90     	; 0x1630 <_fpadd_parts+0x11a>
    15d6:	37 01       	movw	r6, r14
    15d8:	48 01       	movw	r8, r16
    15da:	06 2e       	mov	r0, r22
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <_fpadd_parts+0xd0>
    15de:	96 94       	lsr	r9
    15e0:	87 94       	ror	r8
    15e2:	77 94       	ror	r7
    15e4:	67 94       	ror	r6
    15e6:	0a 94       	dec	r0
    15e8:	d2 f7       	brpl	.-12     	; 0x15de <_fpadd_parts+0xc8>
    15ea:	21 e0       	ldi	r18, 0x01	; 1
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	04 c0       	rjmp	.+8      	; 0x15fc <_fpadd_parts+0xe6>
    15f4:	22 0f       	add	r18, r18
    15f6:	33 1f       	adc	r19, r19
    15f8:	44 1f       	adc	r20, r20
    15fa:	55 1f       	adc	r21, r21
    15fc:	6a 95       	dec	r22
    15fe:	d2 f7       	brpl	.-12     	; 0x15f4 <_fpadd_parts+0xde>
    1600:	21 50       	subi	r18, 0x01	; 1
    1602:	30 40       	sbci	r19, 0x00	; 0
    1604:	40 40       	sbci	r20, 0x00	; 0
    1606:	50 40       	sbci	r21, 0x00	; 0
    1608:	2e 21       	and	r18, r14
    160a:	3f 21       	and	r19, r15
    160c:	40 23       	and	r20, r16
    160e:	51 23       	and	r21, r17
    1610:	21 15       	cp	r18, r1
    1612:	31 05       	cpc	r19, r1
    1614:	41 05       	cpc	r20, r1
    1616:	51 05       	cpc	r21, r1
    1618:	21 f0       	breq	.+8      	; 0x1622 <_fpadd_parts+0x10c>
    161a:	21 e0       	ldi	r18, 0x01	; 1
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	50 e0       	ldi	r21, 0x00	; 0
    1622:	79 01       	movw	r14, r18
    1624:	8a 01       	movw	r16, r20
    1626:	e6 28       	or	r14, r6
    1628:	f7 28       	or	r15, r7
    162a:	08 29       	or	r16, r8
    162c:	19 29       	or	r17, r9
    162e:	3c c0       	rjmp	.+120    	; 0x16a8 <_fpadd_parts+0x192>
    1630:	23 2b       	or	r18, r19
    1632:	d1 f1       	breq	.+116    	; 0x16a8 <_fpadd_parts+0x192>
    1634:	26 0e       	add	r2, r22
    1636:	37 1e       	adc	r3, r23
    1638:	35 01       	movw	r6, r10
    163a:	46 01       	movw	r8, r12
    163c:	06 2e       	mov	r0, r22
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <_fpadd_parts+0x132>
    1640:	96 94       	lsr	r9
    1642:	87 94       	ror	r8
    1644:	77 94       	ror	r7
    1646:	67 94       	ror	r6
    1648:	0a 94       	dec	r0
    164a:	d2 f7       	brpl	.-12     	; 0x1640 <_fpadd_parts+0x12a>
    164c:	21 e0       	ldi	r18, 0x01	; 1
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	04 c0       	rjmp	.+8      	; 0x165e <_fpadd_parts+0x148>
    1656:	22 0f       	add	r18, r18
    1658:	33 1f       	adc	r19, r19
    165a:	44 1f       	adc	r20, r20
    165c:	55 1f       	adc	r21, r21
    165e:	6a 95       	dec	r22
    1660:	d2 f7       	brpl	.-12     	; 0x1656 <_fpadd_parts+0x140>
    1662:	21 50       	subi	r18, 0x01	; 1
    1664:	30 40       	sbci	r19, 0x00	; 0
    1666:	40 40       	sbci	r20, 0x00	; 0
    1668:	50 40       	sbci	r21, 0x00	; 0
    166a:	2a 21       	and	r18, r10
    166c:	3b 21       	and	r19, r11
    166e:	4c 21       	and	r20, r12
    1670:	5d 21       	and	r21, r13
    1672:	21 15       	cp	r18, r1
    1674:	31 05       	cpc	r19, r1
    1676:	41 05       	cpc	r20, r1
    1678:	51 05       	cpc	r21, r1
    167a:	21 f0       	breq	.+8      	; 0x1684 <_fpadd_parts+0x16e>
    167c:	21 e0       	ldi	r18, 0x01	; 1
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	59 01       	movw	r10, r18
    1686:	6a 01       	movw	r12, r20
    1688:	a6 28       	or	r10, r6
    168a:	b7 28       	or	r11, r7
    168c:	c8 28       	or	r12, r8
    168e:	d9 28       	or	r13, r9
    1690:	0b c0       	rjmp	.+22     	; 0x16a8 <_fpadd_parts+0x192>
    1692:	82 15       	cp	r24, r2
    1694:	93 05       	cpc	r25, r3
    1696:	2c f0       	brlt	.+10     	; 0x16a2 <_fpadd_parts+0x18c>
    1698:	1c 01       	movw	r2, r24
    169a:	aa 24       	eor	r10, r10
    169c:	bb 24       	eor	r11, r11
    169e:	65 01       	movw	r12, r10
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <_fpadd_parts+0x192>
    16a2:	ee 24       	eor	r14, r14
    16a4:	ff 24       	eor	r15, r15
    16a6:	87 01       	movw	r16, r14
    16a8:	11 96       	adiw	r26, 0x01	; 1
    16aa:	9c 91       	ld	r25, X
    16ac:	d2 01       	movw	r26, r4
    16ae:	11 96       	adiw	r26, 0x01	; 1
    16b0:	8c 91       	ld	r24, X
    16b2:	98 17       	cp	r25, r24
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <_fpadd_parts+0x1a2>
    16b6:	45 c0       	rjmp	.+138    	; 0x1742 <_fpadd_parts+0x22c>
    16b8:	99 23       	and	r25, r25
    16ba:	39 f0       	breq	.+14     	; 0x16ca <_fpadd_parts+0x1b4>
    16bc:	a8 01       	movw	r20, r16
    16be:	97 01       	movw	r18, r14
    16c0:	2a 19       	sub	r18, r10
    16c2:	3b 09       	sbc	r19, r11
    16c4:	4c 09       	sbc	r20, r12
    16c6:	5d 09       	sbc	r21, r13
    16c8:	06 c0       	rjmp	.+12     	; 0x16d6 <_fpadd_parts+0x1c0>
    16ca:	a6 01       	movw	r20, r12
    16cc:	95 01       	movw	r18, r10
    16ce:	2e 19       	sub	r18, r14
    16d0:	3f 09       	sbc	r19, r15
    16d2:	40 0b       	sbc	r20, r16
    16d4:	51 0b       	sbc	r21, r17
    16d6:	57 fd       	sbrc	r21, 7
    16d8:	08 c0       	rjmp	.+16     	; 0x16ea <_fpadd_parts+0x1d4>
    16da:	11 82       	std	Z+1, r1	; 0x01
    16dc:	33 82       	std	Z+3, r3	; 0x03
    16de:	22 82       	std	Z+2, r2	; 0x02
    16e0:	24 83       	std	Z+4, r18	; 0x04
    16e2:	35 83       	std	Z+5, r19	; 0x05
    16e4:	46 83       	std	Z+6, r20	; 0x06
    16e6:	57 83       	std	Z+7, r21	; 0x07
    16e8:	1d c0       	rjmp	.+58     	; 0x1724 <_fpadd_parts+0x20e>
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	81 83       	std	Z+1, r24	; 0x01
    16ee:	33 82       	std	Z+3, r3	; 0x03
    16f0:	22 82       	std	Z+2, r2	; 0x02
    16f2:	88 27       	eor	r24, r24
    16f4:	99 27       	eor	r25, r25
    16f6:	dc 01       	movw	r26, r24
    16f8:	82 1b       	sub	r24, r18
    16fa:	93 0b       	sbc	r25, r19
    16fc:	a4 0b       	sbc	r26, r20
    16fe:	b5 0b       	sbc	r27, r21
    1700:	84 83       	std	Z+4, r24	; 0x04
    1702:	95 83       	std	Z+5, r25	; 0x05
    1704:	a6 83       	std	Z+6, r26	; 0x06
    1706:	b7 83       	std	Z+7, r27	; 0x07
    1708:	0d c0       	rjmp	.+26     	; 0x1724 <_fpadd_parts+0x20e>
    170a:	22 0f       	add	r18, r18
    170c:	33 1f       	adc	r19, r19
    170e:	44 1f       	adc	r20, r20
    1710:	55 1f       	adc	r21, r21
    1712:	24 83       	std	Z+4, r18	; 0x04
    1714:	35 83       	std	Z+5, r19	; 0x05
    1716:	46 83       	std	Z+6, r20	; 0x06
    1718:	57 83       	std	Z+7, r21	; 0x07
    171a:	82 81       	ldd	r24, Z+2	; 0x02
    171c:	93 81       	ldd	r25, Z+3	; 0x03
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	93 83       	std	Z+3, r25	; 0x03
    1722:	82 83       	std	Z+2, r24	; 0x02
    1724:	24 81       	ldd	r18, Z+4	; 0x04
    1726:	35 81       	ldd	r19, Z+5	; 0x05
    1728:	46 81       	ldd	r20, Z+6	; 0x06
    172a:	57 81       	ldd	r21, Z+7	; 0x07
    172c:	da 01       	movw	r26, r20
    172e:	c9 01       	movw	r24, r18
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	a1 09       	sbc	r26, r1
    1734:	b1 09       	sbc	r27, r1
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	9f 4f       	sbci	r25, 0xFF	; 255
    173a:	af 4f       	sbci	r26, 0xFF	; 255
    173c:	bf 43       	sbci	r27, 0x3F	; 63
    173e:	28 f3       	brcs	.-54     	; 0x170a <_fpadd_parts+0x1f4>
    1740:	0b c0       	rjmp	.+22     	; 0x1758 <_fpadd_parts+0x242>
    1742:	91 83       	std	Z+1, r25	; 0x01
    1744:	33 82       	std	Z+3, r3	; 0x03
    1746:	22 82       	std	Z+2, r2	; 0x02
    1748:	ea 0c       	add	r14, r10
    174a:	fb 1c       	adc	r15, r11
    174c:	0c 1d       	adc	r16, r12
    174e:	1d 1d       	adc	r17, r13
    1750:	e4 82       	std	Z+4, r14	; 0x04
    1752:	f5 82       	std	Z+5, r15	; 0x05
    1754:	06 83       	std	Z+6, r16	; 0x06
    1756:	17 83       	std	Z+7, r17	; 0x07
    1758:	83 e0       	ldi	r24, 0x03	; 3
    175a:	80 83       	st	Z, r24
    175c:	24 81       	ldd	r18, Z+4	; 0x04
    175e:	35 81       	ldd	r19, Z+5	; 0x05
    1760:	46 81       	ldd	r20, Z+6	; 0x06
    1762:	57 81       	ldd	r21, Z+7	; 0x07
    1764:	57 ff       	sbrs	r21, 7
    1766:	1a c0       	rjmp	.+52     	; 0x179c <_fpadd_parts+0x286>
    1768:	c9 01       	movw	r24, r18
    176a:	aa 27       	eor	r26, r26
    176c:	97 fd       	sbrc	r25, 7
    176e:	a0 95       	com	r26
    1770:	ba 2f       	mov	r27, r26
    1772:	81 70       	andi	r24, 0x01	; 1
    1774:	90 70       	andi	r25, 0x00	; 0
    1776:	a0 70       	andi	r26, 0x00	; 0
    1778:	b0 70       	andi	r27, 0x00	; 0
    177a:	56 95       	lsr	r21
    177c:	47 95       	ror	r20
    177e:	37 95       	ror	r19
    1780:	27 95       	ror	r18
    1782:	82 2b       	or	r24, r18
    1784:	93 2b       	or	r25, r19
    1786:	a4 2b       	or	r26, r20
    1788:	b5 2b       	or	r27, r21
    178a:	84 83       	std	Z+4, r24	; 0x04
    178c:	95 83       	std	Z+5, r25	; 0x05
    178e:	a6 83       	std	Z+6, r26	; 0x06
    1790:	b7 83       	std	Z+7, r27	; 0x07
    1792:	82 81       	ldd	r24, Z+2	; 0x02
    1794:	93 81       	ldd	r25, Z+3	; 0x03
    1796:	01 96       	adiw	r24, 0x01	; 1
    1798:	93 83       	std	Z+3, r25	; 0x03
    179a:	82 83       	std	Z+2, r24	; 0x02
    179c:	df 01       	movw	r26, r30
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <_fpadd_parts+0x28c>
    17a0:	d2 01       	movw	r26, r4
    17a2:	cd 01       	movw	r24, r26
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	e2 e1       	ldi	r30, 0x12	; 18
    17aa:	0c 94 16 10 	jmp	0x202c	; 0x202c <__epilogue_restores__>

000017ae <__subsf3>:
    17ae:	a0 e2       	ldi	r26, 0x20	; 32
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ed ed       	ldi	r30, 0xDD	; 221
    17b4:	fb e0       	ldi	r31, 0x0B	; 11
    17b6:	0c 94 06 10 	jmp	0x200c	; 0x200c <__prologue_saves__+0x18>
    17ba:	69 83       	std	Y+1, r22	; 0x01
    17bc:	7a 83       	std	Y+2, r23	; 0x02
    17be:	8b 83       	std	Y+3, r24	; 0x03
    17c0:	9c 83       	std	Y+4, r25	; 0x04
    17c2:	2d 83       	std	Y+5, r18	; 0x05
    17c4:	3e 83       	std	Y+6, r19	; 0x06
    17c6:	4f 83       	std	Y+7, r20	; 0x07
    17c8:	58 87       	std	Y+8, r21	; 0x08
    17ca:	e9 e0       	ldi	r30, 0x09	; 9
    17cc:	ee 2e       	mov	r14, r30
    17ce:	f1 2c       	mov	r15, r1
    17d0:	ec 0e       	add	r14, r28
    17d2:	fd 1e       	adc	r15, r29
    17d4:	ce 01       	movw	r24, r28
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	b7 01       	movw	r22, r14
    17da:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__unpack_f>
    17de:	8e 01       	movw	r16, r28
    17e0:	0f 5e       	subi	r16, 0xEF	; 239
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	ce 01       	movw	r24, r28
    17e6:	05 96       	adiw	r24, 0x05	; 5
    17e8:	b8 01       	movw	r22, r16
    17ea:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__unpack_f>
    17ee:	8a 89       	ldd	r24, Y+18	; 0x12
    17f0:	91 e0       	ldi	r25, 0x01	; 1
    17f2:	89 27       	eor	r24, r25
    17f4:	8a 8b       	std	Y+18, r24	; 0x12
    17f6:	c7 01       	movw	r24, r14
    17f8:	b8 01       	movw	r22, r16
    17fa:	ae 01       	movw	r20, r28
    17fc:	47 5e       	subi	r20, 0xE7	; 231
    17fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1800:	0e 94 8b 0a 	call	0x1516	; 0x1516 <_fpadd_parts>
    1804:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__pack_f>
    1808:	a0 96       	adiw	r28, 0x20	; 32
    180a:	e6 e0       	ldi	r30, 0x06	; 6
    180c:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__epilogue_restores__+0x18>

00001810 <__addsf3>:
    1810:	a0 e2       	ldi	r26, 0x20	; 32
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ee e0       	ldi	r30, 0x0E	; 14
    1816:	fc e0       	ldi	r31, 0x0C	; 12
    1818:	0c 94 06 10 	jmp	0x200c	; 0x200c <__prologue_saves__+0x18>
    181c:	69 83       	std	Y+1, r22	; 0x01
    181e:	7a 83       	std	Y+2, r23	; 0x02
    1820:	8b 83       	std	Y+3, r24	; 0x03
    1822:	9c 83       	std	Y+4, r25	; 0x04
    1824:	2d 83       	std	Y+5, r18	; 0x05
    1826:	3e 83       	std	Y+6, r19	; 0x06
    1828:	4f 83       	std	Y+7, r20	; 0x07
    182a:	58 87       	std	Y+8, r21	; 0x08
    182c:	f9 e0       	ldi	r31, 0x09	; 9
    182e:	ef 2e       	mov	r14, r31
    1830:	f1 2c       	mov	r15, r1
    1832:	ec 0e       	add	r14, r28
    1834:	fd 1e       	adc	r15, r29
    1836:	ce 01       	movw	r24, r28
    1838:	01 96       	adiw	r24, 0x01	; 1
    183a:	b7 01       	movw	r22, r14
    183c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__unpack_f>
    1840:	8e 01       	movw	r16, r28
    1842:	0f 5e       	subi	r16, 0xEF	; 239
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	ce 01       	movw	r24, r28
    1848:	05 96       	adiw	r24, 0x05	; 5
    184a:	b8 01       	movw	r22, r16
    184c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__unpack_f>
    1850:	c7 01       	movw	r24, r14
    1852:	b8 01       	movw	r22, r16
    1854:	ae 01       	movw	r20, r28
    1856:	47 5e       	subi	r20, 0xE7	; 231
    1858:	5f 4f       	sbci	r21, 0xFF	; 255
    185a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <_fpadd_parts>
    185e:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__pack_f>
    1862:	a0 96       	adiw	r28, 0x20	; 32
    1864:	e6 e0       	ldi	r30, 0x06	; 6
    1866:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__epilogue_restores__+0x18>

0000186a <__divsf3>:
    186a:	a8 e1       	ldi	r26, 0x18	; 24
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	eb e3       	ldi	r30, 0x3B	; 59
    1870:	fc e0       	ldi	r31, 0x0C	; 12
    1872:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__prologue_saves__+0x10>
    1876:	69 83       	std	Y+1, r22	; 0x01
    1878:	7a 83       	std	Y+2, r23	; 0x02
    187a:	8b 83       	std	Y+3, r24	; 0x03
    187c:	9c 83       	std	Y+4, r25	; 0x04
    187e:	2d 83       	std	Y+5, r18	; 0x05
    1880:	3e 83       	std	Y+6, r19	; 0x06
    1882:	4f 83       	std	Y+7, r20	; 0x07
    1884:	58 87       	std	Y+8, r21	; 0x08
    1886:	b9 e0       	ldi	r27, 0x09	; 9
    1888:	eb 2e       	mov	r14, r27
    188a:	f1 2c       	mov	r15, r1
    188c:	ec 0e       	add	r14, r28
    188e:	fd 1e       	adc	r15, r29
    1890:	ce 01       	movw	r24, r28
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	b7 01       	movw	r22, r14
    1896:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__unpack_f>
    189a:	8e 01       	movw	r16, r28
    189c:	0f 5e       	subi	r16, 0xEF	; 239
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	ce 01       	movw	r24, r28
    18a2:	05 96       	adiw	r24, 0x05	; 5
    18a4:	b8 01       	movw	r22, r16
    18a6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__unpack_f>
    18aa:	29 85       	ldd	r18, Y+9	; 0x09
    18ac:	22 30       	cpi	r18, 0x02	; 2
    18ae:	08 f4       	brcc	.+2      	; 0x18b2 <__divsf3+0x48>
    18b0:	7e c0       	rjmp	.+252    	; 0x19ae <__divsf3+0x144>
    18b2:	39 89       	ldd	r19, Y+17	; 0x11
    18b4:	32 30       	cpi	r19, 0x02	; 2
    18b6:	10 f4       	brcc	.+4      	; 0x18bc <__divsf3+0x52>
    18b8:	b8 01       	movw	r22, r16
    18ba:	7c c0       	rjmp	.+248    	; 0x19b4 <__divsf3+0x14a>
    18bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    18be:	9a 89       	ldd	r25, Y+18	; 0x12
    18c0:	89 27       	eor	r24, r25
    18c2:	8a 87       	std	Y+10, r24	; 0x0a
    18c4:	24 30       	cpi	r18, 0x04	; 4
    18c6:	11 f0       	breq	.+4      	; 0x18cc <__divsf3+0x62>
    18c8:	22 30       	cpi	r18, 0x02	; 2
    18ca:	31 f4       	brne	.+12     	; 0x18d8 <__divsf3+0x6e>
    18cc:	23 17       	cp	r18, r19
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <__divsf3+0x68>
    18d0:	6e c0       	rjmp	.+220    	; 0x19ae <__divsf3+0x144>
    18d2:	68 e0       	ldi	r22, 0x08	; 8
    18d4:	71 e0       	ldi	r23, 0x01	; 1
    18d6:	6e c0       	rjmp	.+220    	; 0x19b4 <__divsf3+0x14a>
    18d8:	34 30       	cpi	r19, 0x04	; 4
    18da:	39 f4       	brne	.+14     	; 0x18ea <__divsf3+0x80>
    18dc:	1d 86       	std	Y+13, r1	; 0x0d
    18de:	1e 86       	std	Y+14, r1	; 0x0e
    18e0:	1f 86       	std	Y+15, r1	; 0x0f
    18e2:	18 8a       	std	Y+16, r1	; 0x10
    18e4:	1c 86       	std	Y+12, r1	; 0x0c
    18e6:	1b 86       	std	Y+11, r1	; 0x0b
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <__divsf3+0x88>
    18ea:	32 30       	cpi	r19, 0x02	; 2
    18ec:	21 f4       	brne	.+8      	; 0x18f6 <__divsf3+0x8c>
    18ee:	84 e0       	ldi	r24, 0x04	; 4
    18f0:	89 87       	std	Y+9, r24	; 0x09
    18f2:	b7 01       	movw	r22, r14
    18f4:	5f c0       	rjmp	.+190    	; 0x19b4 <__divsf3+0x14a>
    18f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    18f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    18fa:	8b 89       	ldd	r24, Y+19	; 0x13
    18fc:	9c 89       	ldd	r25, Y+20	; 0x14
    18fe:	28 1b       	sub	r18, r24
    1900:	39 0b       	sbc	r19, r25
    1902:	3c 87       	std	Y+12, r19	; 0x0c
    1904:	2b 87       	std	Y+11, r18	; 0x0b
    1906:	ed 84       	ldd	r14, Y+13	; 0x0d
    1908:	fe 84       	ldd	r15, Y+14	; 0x0e
    190a:	0f 85       	ldd	r16, Y+15	; 0x0f
    190c:	18 89       	ldd	r17, Y+16	; 0x10
    190e:	ad 88       	ldd	r10, Y+21	; 0x15
    1910:	be 88       	ldd	r11, Y+22	; 0x16
    1912:	cf 88       	ldd	r12, Y+23	; 0x17
    1914:	d8 8c       	ldd	r13, Y+24	; 0x18
    1916:	ea 14       	cp	r14, r10
    1918:	fb 04       	cpc	r15, r11
    191a:	0c 05       	cpc	r16, r12
    191c:	1d 05       	cpc	r17, r13
    191e:	40 f4       	brcc	.+16     	; 0x1930 <__divsf3+0xc6>
    1920:	ee 0c       	add	r14, r14
    1922:	ff 1c       	adc	r15, r15
    1924:	00 1f       	adc	r16, r16
    1926:	11 1f       	adc	r17, r17
    1928:	21 50       	subi	r18, 0x01	; 1
    192a:	30 40       	sbci	r19, 0x00	; 0
    192c:	3c 87       	std	Y+12, r19	; 0x0c
    192e:	2b 87       	std	Y+11, r18	; 0x0b
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a0 e0       	ldi	r26, 0x00	; 0
    193e:	b0 e4       	ldi	r27, 0x40	; 64
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	ea 14       	cp	r14, r10
    1946:	fb 04       	cpc	r15, r11
    1948:	0c 05       	cpc	r16, r12
    194a:	1d 05       	cpc	r17, r13
    194c:	40 f0       	brcs	.+16     	; 0x195e <__divsf3+0xf4>
    194e:	28 2b       	or	r18, r24
    1950:	39 2b       	or	r19, r25
    1952:	4a 2b       	or	r20, r26
    1954:	5b 2b       	or	r21, r27
    1956:	ea 18       	sub	r14, r10
    1958:	fb 08       	sbc	r15, r11
    195a:	0c 09       	sbc	r16, r12
    195c:	1d 09       	sbc	r17, r13
    195e:	b6 95       	lsr	r27
    1960:	a7 95       	ror	r26
    1962:	97 95       	ror	r25
    1964:	87 95       	ror	r24
    1966:	ee 0c       	add	r14, r14
    1968:	ff 1c       	adc	r15, r15
    196a:	00 1f       	adc	r16, r16
    196c:	11 1f       	adc	r17, r17
    196e:	6f 5f       	subi	r22, 0xFF	; 255
    1970:	7f 4f       	sbci	r23, 0xFF	; 255
    1972:	6f 31       	cpi	r22, 0x1F	; 31
    1974:	71 05       	cpc	r23, r1
    1976:	31 f7       	brne	.-52     	; 0x1944 <__divsf3+0xda>
    1978:	da 01       	movw	r26, r20
    197a:	c9 01       	movw	r24, r18
    197c:	8f 77       	andi	r24, 0x7F	; 127
    197e:	90 70       	andi	r25, 0x00	; 0
    1980:	a0 70       	andi	r26, 0x00	; 0
    1982:	b0 70       	andi	r27, 0x00	; 0
    1984:	80 34       	cpi	r24, 0x40	; 64
    1986:	91 05       	cpc	r25, r1
    1988:	a1 05       	cpc	r26, r1
    198a:	b1 05       	cpc	r27, r1
    198c:	61 f4       	brne	.+24     	; 0x19a6 <__divsf3+0x13c>
    198e:	27 fd       	sbrc	r18, 7
    1990:	0a c0       	rjmp	.+20     	; 0x19a6 <__divsf3+0x13c>
    1992:	e1 14       	cp	r14, r1
    1994:	f1 04       	cpc	r15, r1
    1996:	01 05       	cpc	r16, r1
    1998:	11 05       	cpc	r17, r1
    199a:	29 f0       	breq	.+10     	; 0x19a6 <__divsf3+0x13c>
    199c:	20 5c       	subi	r18, 0xC0	; 192
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	4f 4f       	sbci	r20, 0xFF	; 255
    19a2:	5f 4f       	sbci	r21, 0xFF	; 255
    19a4:	20 78       	andi	r18, 0x80	; 128
    19a6:	2d 87       	std	Y+13, r18	; 0x0d
    19a8:	3e 87       	std	Y+14, r19	; 0x0e
    19aa:	4f 87       	std	Y+15, r20	; 0x0f
    19ac:	58 8b       	std	Y+16, r21	; 0x10
    19ae:	be 01       	movw	r22, r28
    19b0:	67 5f       	subi	r22, 0xF7	; 247
    19b2:	7f 4f       	sbci	r23, 0xFF	; 255
    19b4:	cb 01       	movw	r24, r22
    19b6:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__pack_f>
    19ba:	68 96       	adiw	r28, 0x18	; 24
    19bc:	ea e0       	ldi	r30, 0x0A	; 10
    19be:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__epilogue_restores__+0x10>

000019c2 <__gesf2>:
    19c2:	a8 e1       	ldi	r26, 0x18	; 24
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e7 ee       	ldi	r30, 0xE7	; 231
    19c8:	fc e0       	ldi	r31, 0x0C	; 12
    19ca:	0c 94 06 10 	jmp	0x200c	; 0x200c <__prologue_saves__+0x18>
    19ce:	69 83       	std	Y+1, r22	; 0x01
    19d0:	7a 83       	std	Y+2, r23	; 0x02
    19d2:	8b 83       	std	Y+3, r24	; 0x03
    19d4:	9c 83       	std	Y+4, r25	; 0x04
    19d6:	2d 83       	std	Y+5, r18	; 0x05
    19d8:	3e 83       	std	Y+6, r19	; 0x06
    19da:	4f 83       	std	Y+7, r20	; 0x07
    19dc:	58 87       	std	Y+8, r21	; 0x08
    19de:	89 e0       	ldi	r24, 0x09	; 9
    19e0:	e8 2e       	mov	r14, r24
    19e2:	f1 2c       	mov	r15, r1
    19e4:	ec 0e       	add	r14, r28
    19e6:	fd 1e       	adc	r15, r29
    19e8:	ce 01       	movw	r24, r28
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	b7 01       	movw	r22, r14
    19ee:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__unpack_f>
    19f2:	8e 01       	movw	r16, r28
    19f4:	0f 5e       	subi	r16, 0xEF	; 239
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	ce 01       	movw	r24, r28
    19fa:	05 96       	adiw	r24, 0x05	; 5
    19fc:	b8 01       	movw	r22, r16
    19fe:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__unpack_f>
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	82 30       	cpi	r24, 0x02	; 2
    1a06:	40 f0       	brcs	.+16     	; 0x1a18 <__gesf2+0x56>
    1a08:	89 89       	ldd	r24, Y+17	; 0x11
    1a0a:	82 30       	cpi	r24, 0x02	; 2
    1a0c:	28 f0       	brcs	.+10     	; 0x1a18 <__gesf2+0x56>
    1a0e:	c7 01       	movw	r24, r14
    1a10:	b8 01       	movw	r22, r16
    1a12:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__fpcmp_parts_f>
    1a16:	01 c0       	rjmp	.+2      	; 0x1a1a <__gesf2+0x58>
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
    1a1a:	68 96       	adiw	r28, 0x18	; 24
    1a1c:	e6 e0       	ldi	r30, 0x06	; 6
    1a1e:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__epilogue_restores__+0x18>

00001a22 <__fixsfsi>:
    1a22:	ac e0       	ldi	r26, 0x0C	; 12
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e7 e1       	ldi	r30, 0x17	; 23
    1a28:	fd e0       	ldi	r31, 0x0D	; 13
    1a2a:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__prologue_saves__+0x20>
    1a2e:	69 83       	std	Y+1, r22	; 0x01
    1a30:	7a 83       	std	Y+2, r23	; 0x02
    1a32:	8b 83       	std	Y+3, r24	; 0x03
    1a34:	9c 83       	std	Y+4, r25	; 0x04
    1a36:	ce 01       	movw	r24, r28
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	be 01       	movw	r22, r28
    1a3c:	6b 5f       	subi	r22, 0xFB	; 251
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__unpack_f>
    1a44:	8d 81       	ldd	r24, Y+5	; 0x05
    1a46:	82 30       	cpi	r24, 0x02	; 2
    1a48:	61 f1       	breq	.+88     	; 0x1aa2 <__fixsfsi+0x80>
    1a4a:	82 30       	cpi	r24, 0x02	; 2
    1a4c:	50 f1       	brcs	.+84     	; 0x1aa2 <__fixsfsi+0x80>
    1a4e:	84 30       	cpi	r24, 0x04	; 4
    1a50:	21 f4       	brne	.+8      	; 0x1a5a <__fixsfsi+0x38>
    1a52:	8e 81       	ldd	r24, Y+6	; 0x06
    1a54:	88 23       	and	r24, r24
    1a56:	51 f1       	breq	.+84     	; 0x1aac <__fixsfsi+0x8a>
    1a58:	2e c0       	rjmp	.+92     	; 0x1ab6 <__fixsfsi+0x94>
    1a5a:	2f 81       	ldd	r18, Y+7	; 0x07
    1a5c:	38 85       	ldd	r19, Y+8	; 0x08
    1a5e:	37 fd       	sbrc	r19, 7
    1a60:	20 c0       	rjmp	.+64     	; 0x1aa2 <__fixsfsi+0x80>
    1a62:	6e 81       	ldd	r22, Y+6	; 0x06
    1a64:	2f 31       	cpi	r18, 0x1F	; 31
    1a66:	31 05       	cpc	r19, r1
    1a68:	1c f0       	brlt	.+6      	; 0x1a70 <__fixsfsi+0x4e>
    1a6a:	66 23       	and	r22, r22
    1a6c:	f9 f0       	breq	.+62     	; 0x1aac <__fixsfsi+0x8a>
    1a6e:	23 c0       	rjmp	.+70     	; 0x1ab6 <__fixsfsi+0x94>
    1a70:	8e e1       	ldi	r24, 0x1E	; 30
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	82 1b       	sub	r24, r18
    1a76:	93 0b       	sbc	r25, r19
    1a78:	29 85       	ldd	r18, Y+9	; 0x09
    1a7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a7c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a7e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a80:	04 c0       	rjmp	.+8      	; 0x1a8a <__fixsfsi+0x68>
    1a82:	56 95       	lsr	r21
    1a84:	47 95       	ror	r20
    1a86:	37 95       	ror	r19
    1a88:	27 95       	ror	r18
    1a8a:	8a 95       	dec	r24
    1a8c:	d2 f7       	brpl	.-12     	; 0x1a82 <__fixsfsi+0x60>
    1a8e:	66 23       	and	r22, r22
    1a90:	b1 f0       	breq	.+44     	; 0x1abe <__fixsfsi+0x9c>
    1a92:	50 95       	com	r21
    1a94:	40 95       	com	r20
    1a96:	30 95       	com	r19
    1a98:	21 95       	neg	r18
    1a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa0:	0e c0       	rjmp	.+28     	; 0x1abe <__fixsfsi+0x9c>
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e0       	ldi	r20, 0x00	; 0
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	09 c0       	rjmp	.+18     	; 0x1abe <__fixsfsi+0x9c>
    1aac:	2f ef       	ldi	r18, 0xFF	; 255
    1aae:	3f ef       	ldi	r19, 0xFF	; 255
    1ab0:	4f ef       	ldi	r20, 0xFF	; 255
    1ab2:	5f e7       	ldi	r21, 0x7F	; 127
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <__fixsfsi+0x9c>
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e8       	ldi	r21, 0x80	; 128
    1abe:	b9 01       	movw	r22, r18
    1ac0:	ca 01       	movw	r24, r20
    1ac2:	2c 96       	adiw	r28, 0x0c	; 12
    1ac4:	e2 e0       	ldi	r30, 0x02	; 2
    1ac6:	0c 94 26 10 	jmp	0x204c	; 0x204c <__epilogue_restores__+0x20>

00001aca <__floatunsisf>:
    1aca:	a8 e0       	ldi	r26, 0x08	; 8
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	eb e6       	ldi	r30, 0x6B	; 107
    1ad0:	fd e0       	ldi	r31, 0x0D	; 13
    1ad2:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__prologue_saves__+0x10>
    1ad6:	7b 01       	movw	r14, r22
    1ad8:	8c 01       	movw	r16, r24
    1ada:	61 15       	cp	r22, r1
    1adc:	71 05       	cpc	r23, r1
    1ade:	81 05       	cpc	r24, r1
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	19 f4       	brne	.+6      	; 0x1aea <__floatunsisf+0x20>
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	60 c0       	rjmp	.+192    	; 0x1baa <__floatunsisf+0xe0>
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	8e e1       	ldi	r24, 0x1E	; 30
    1af0:	c8 2e       	mov	r12, r24
    1af2:	d1 2c       	mov	r13, r1
    1af4:	dc 82       	std	Y+4, r13	; 0x04
    1af6:	cb 82       	std	Y+3, r12	; 0x03
    1af8:	ed 82       	std	Y+5, r14	; 0x05
    1afa:	fe 82       	std	Y+6, r15	; 0x06
    1afc:	0f 83       	std	Y+7, r16	; 0x07
    1afe:	18 87       	std	Y+8, r17	; 0x08
    1b00:	c8 01       	movw	r24, r16
    1b02:	b7 01       	movw	r22, r14
    1b04:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__clzsi2>
    1b08:	fc 01       	movw	r30, r24
    1b0a:	31 97       	sbiw	r30, 0x01	; 1
    1b0c:	f7 ff       	sbrs	r31, 7
    1b0e:	3b c0       	rjmp	.+118    	; 0x1b86 <__floatunsisf+0xbc>
    1b10:	22 27       	eor	r18, r18
    1b12:	33 27       	eor	r19, r19
    1b14:	2e 1b       	sub	r18, r30
    1b16:	3f 0b       	sbc	r19, r31
    1b18:	57 01       	movw	r10, r14
    1b1a:	68 01       	movw	r12, r16
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	04 c0       	rjmp	.+8      	; 0x1b28 <__floatunsisf+0x5e>
    1b20:	d6 94       	lsr	r13
    1b22:	c7 94       	ror	r12
    1b24:	b7 94       	ror	r11
    1b26:	a7 94       	ror	r10
    1b28:	0a 94       	dec	r0
    1b2a:	d2 f7       	brpl	.-12     	; 0x1b20 <__floatunsisf+0x56>
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a0 e0       	ldi	r26, 0x00	; 0
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	04 c0       	rjmp	.+8      	; 0x1b46 <__floatunsisf+0x7c>
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	aa 1f       	adc	r26, r26
    1b44:	bb 1f       	adc	r27, r27
    1b46:	2a 95       	dec	r18
    1b48:	d2 f7       	brpl	.-12     	; 0x1b3e <__floatunsisf+0x74>
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	a1 09       	sbc	r26, r1
    1b4e:	b1 09       	sbc	r27, r1
    1b50:	8e 21       	and	r24, r14
    1b52:	9f 21       	and	r25, r15
    1b54:	a0 23       	and	r26, r16
    1b56:	b1 23       	and	r27, r17
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	a1 05       	cpc	r26, r1
    1b5c:	b1 05       	cpc	r27, r1
    1b5e:	21 f0       	breq	.+8      	; 0x1b68 <__floatunsisf+0x9e>
    1b60:	41 e0       	ldi	r20, 0x01	; 1
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	4a 29       	or	r20, r10
    1b6a:	5b 29       	or	r21, r11
    1b6c:	6c 29       	or	r22, r12
    1b6e:	7d 29       	or	r23, r13
    1b70:	4d 83       	std	Y+5, r20	; 0x05
    1b72:	5e 83       	std	Y+6, r21	; 0x06
    1b74:	6f 83       	std	Y+7, r22	; 0x07
    1b76:	78 87       	std	Y+8, r23	; 0x08
    1b78:	8e e1       	ldi	r24, 0x1E	; 30
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	8e 1b       	sub	r24, r30
    1b7e:	9f 0b       	sbc	r25, r31
    1b80:	9c 83       	std	Y+4, r25	; 0x04
    1b82:	8b 83       	std	Y+3, r24	; 0x03
    1b84:	12 c0       	rjmp	.+36     	; 0x1baa <__floatunsisf+0xe0>
    1b86:	30 97       	sbiw	r30, 0x00	; 0
    1b88:	81 f0       	breq	.+32     	; 0x1baa <__floatunsisf+0xe0>
    1b8a:	0e 2e       	mov	r0, r30
    1b8c:	04 c0       	rjmp	.+8      	; 0x1b96 <__floatunsisf+0xcc>
    1b8e:	ee 0c       	add	r14, r14
    1b90:	ff 1c       	adc	r15, r15
    1b92:	00 1f       	adc	r16, r16
    1b94:	11 1f       	adc	r17, r17
    1b96:	0a 94       	dec	r0
    1b98:	d2 f7       	brpl	.-12     	; 0x1b8e <__floatunsisf+0xc4>
    1b9a:	ed 82       	std	Y+5, r14	; 0x05
    1b9c:	fe 82       	std	Y+6, r15	; 0x06
    1b9e:	0f 83       	std	Y+7, r16	; 0x07
    1ba0:	18 87       	std	Y+8, r17	; 0x08
    1ba2:	ce 1a       	sub	r12, r30
    1ba4:	df 0a       	sbc	r13, r31
    1ba6:	dc 82       	std	Y+4, r13	; 0x04
    1ba8:	cb 82       	std	Y+3, r12	; 0x03
    1baa:	1a 82       	std	Y+2, r1	; 0x02
    1bac:	ce 01       	movw	r24, r28
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__pack_f>
    1bb4:	28 96       	adiw	r28, 0x08	; 8
    1bb6:	ea e0       	ldi	r30, 0x0A	; 10
    1bb8:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__epilogue_restores__+0x10>

00001bbc <__clzsi2>:
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	7b 01       	movw	r14, r22
    1bc6:	8c 01       	movw	r16, r24
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	e8 16       	cp	r14, r24
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	f8 06       	cpc	r15, r24
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	08 07       	cpc	r16, r24
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	18 07       	cpc	r17, r24
    1bd8:	88 f4       	brcc	.+34     	; 0x1bfc <__clzsi2+0x40>
    1bda:	8f ef       	ldi	r24, 0xFF	; 255
    1bdc:	e8 16       	cp	r14, r24
    1bde:	f1 04       	cpc	r15, r1
    1be0:	01 05       	cpc	r16, r1
    1be2:	11 05       	cpc	r17, r1
    1be4:	31 f0       	breq	.+12     	; 0x1bf2 <__clzsi2+0x36>
    1be6:	28 f0       	brcs	.+10     	; 0x1bf2 <__clzsi2+0x36>
    1be8:	88 e0       	ldi	r24, 0x08	; 8
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a0 e0       	ldi	r26, 0x00	; 0
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	17 c0       	rjmp	.+46     	; 0x1c20 <__clzsi2+0x64>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	a0 e0       	ldi	r26, 0x00	; 0
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	12 c0       	rjmp	.+36     	; 0x1c20 <__clzsi2+0x64>
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	e8 16       	cp	r14, r24
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	f8 06       	cpc	r15, r24
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	08 07       	cpc	r16, r24
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	18 07       	cpc	r17, r24
    1c0c:	28 f0       	brcs	.+10     	; 0x1c18 <__clzsi2+0x5c>
    1c0e:	88 e1       	ldi	r24, 0x18	; 24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a0 e0       	ldi	r26, 0x00	; 0
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	04 c0       	rjmp	.+8      	; 0x1c20 <__clzsi2+0x64>
    1c18:	80 e1       	ldi	r24, 0x10	; 16
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a0 e0       	ldi	r26, 0x00	; 0
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	20 e2       	ldi	r18, 0x20	; 32
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	28 1b       	sub	r18, r24
    1c2a:	39 0b       	sbc	r19, r25
    1c2c:	4a 0b       	sbc	r20, r26
    1c2e:	5b 0b       	sbc	r21, r27
    1c30:	04 c0       	rjmp	.+8      	; 0x1c3a <__clzsi2+0x7e>
    1c32:	16 95       	lsr	r17
    1c34:	07 95       	ror	r16
    1c36:	f7 94       	ror	r15
    1c38:	e7 94       	ror	r14
    1c3a:	8a 95       	dec	r24
    1c3c:	d2 f7       	brpl	.-12     	; 0x1c32 <__clzsi2+0x76>
    1c3e:	f7 01       	movw	r30, r14
    1c40:	e0 5f       	subi	r30, 0xF0	; 240
    1c42:	fe 4f       	sbci	r31, 0xFE	; 254
    1c44:	80 81       	ld	r24, Z
    1c46:	28 1b       	sub	r18, r24
    1c48:	31 09       	sbc	r19, r1
    1c4a:	41 09       	sbc	r20, r1
    1c4c:	51 09       	sbc	r21, r1
    1c4e:	c9 01       	movw	r24, r18
    1c50:	1f 91       	pop	r17
    1c52:	0f 91       	pop	r16
    1c54:	ff 90       	pop	r15
    1c56:	ef 90       	pop	r14
    1c58:	08 95       	ret

00001c5a <__pack_f>:
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	fc 01       	movw	r30, r24
    1c66:	e4 80       	ldd	r14, Z+4	; 0x04
    1c68:	f5 80       	ldd	r15, Z+5	; 0x05
    1c6a:	06 81       	ldd	r16, Z+6	; 0x06
    1c6c:	17 81       	ldd	r17, Z+7	; 0x07
    1c6e:	d1 80       	ldd	r13, Z+1	; 0x01
    1c70:	80 81       	ld	r24, Z
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	48 f4       	brcc	.+18     	; 0x1c88 <__pack_f+0x2e>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e1       	ldi	r26, 0x10	; 16
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e8 2a       	or	r14, r24
    1c80:	f9 2a       	or	r15, r25
    1c82:	0a 2b       	or	r16, r26
    1c84:	1b 2b       	or	r17, r27
    1c86:	a5 c0       	rjmp	.+330    	; 0x1dd2 <__pack_f+0x178>
    1c88:	84 30       	cpi	r24, 0x04	; 4
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <__pack_f+0x34>
    1c8c:	9f c0       	rjmp	.+318    	; 0x1dcc <__pack_f+0x172>
    1c8e:	82 30       	cpi	r24, 0x02	; 2
    1c90:	21 f4       	brne	.+8      	; 0x1c9a <__pack_f+0x40>
    1c92:	ee 24       	eor	r14, r14
    1c94:	ff 24       	eor	r15, r15
    1c96:	87 01       	movw	r16, r14
    1c98:	05 c0       	rjmp	.+10     	; 0x1ca4 <__pack_f+0x4a>
    1c9a:	e1 14       	cp	r14, r1
    1c9c:	f1 04       	cpc	r15, r1
    1c9e:	01 05       	cpc	r16, r1
    1ca0:	11 05       	cpc	r17, r1
    1ca2:	19 f4       	brne	.+6      	; 0x1caa <__pack_f+0x50>
    1ca4:	e0 e0       	ldi	r30, 0x00	; 0
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	96 c0       	rjmp	.+300    	; 0x1dd6 <__pack_f+0x17c>
    1caa:	62 81       	ldd	r22, Z+2	; 0x02
    1cac:	73 81       	ldd	r23, Z+3	; 0x03
    1cae:	9f ef       	ldi	r25, 0xFF	; 255
    1cb0:	62 38       	cpi	r22, 0x82	; 130
    1cb2:	79 07       	cpc	r23, r25
    1cb4:	0c f0       	brlt	.+2      	; 0x1cb8 <__pack_f+0x5e>
    1cb6:	5b c0       	rjmp	.+182    	; 0x1d6e <__pack_f+0x114>
    1cb8:	22 e8       	ldi	r18, 0x82	; 130
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	26 1b       	sub	r18, r22
    1cbe:	37 0b       	sbc	r19, r23
    1cc0:	2a 31       	cpi	r18, 0x1A	; 26
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	2c f0       	brlt	.+10     	; 0x1cd0 <__pack_f+0x76>
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	2a c0       	rjmp	.+84     	; 0x1d24 <__pack_f+0xca>
    1cd0:	b8 01       	movw	r22, r16
    1cd2:	a7 01       	movw	r20, r14
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <__pack_f+0x86>
    1cd8:	76 95       	lsr	r23
    1cda:	67 95       	ror	r22
    1cdc:	57 95       	ror	r21
    1cde:	47 95       	ror	r20
    1ce0:	0a 94       	dec	r0
    1ce2:	d2 f7       	brpl	.-12     	; 0x1cd8 <__pack_f+0x7e>
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a0 e0       	ldi	r26, 0x00	; 0
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	04 c0       	rjmp	.+8      	; 0x1cf6 <__pack_f+0x9c>
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	aa 1f       	adc	r26, r26
    1cf4:	bb 1f       	adc	r27, r27
    1cf6:	2a 95       	dec	r18
    1cf8:	d2 f7       	brpl	.-12     	; 0x1cee <__pack_f+0x94>
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	a1 09       	sbc	r26, r1
    1cfe:	b1 09       	sbc	r27, r1
    1d00:	8e 21       	and	r24, r14
    1d02:	9f 21       	and	r25, r15
    1d04:	a0 23       	and	r26, r16
    1d06:	b1 23       	and	r27, r17
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	a1 05       	cpc	r26, r1
    1d0c:	b1 05       	cpc	r27, r1
    1d0e:	21 f0       	breq	.+8      	; 0x1d18 <__pack_f+0xbe>
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a0 e0       	ldi	r26, 0x00	; 0
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	9a 01       	movw	r18, r20
    1d1a:	ab 01       	movw	r20, r22
    1d1c:	28 2b       	or	r18, r24
    1d1e:	39 2b       	or	r19, r25
    1d20:	4a 2b       	or	r20, r26
    1d22:	5b 2b       	or	r21, r27
    1d24:	da 01       	movw	r26, r20
    1d26:	c9 01       	movw	r24, r18
    1d28:	8f 77       	andi	r24, 0x7F	; 127
    1d2a:	90 70       	andi	r25, 0x00	; 0
    1d2c:	a0 70       	andi	r26, 0x00	; 0
    1d2e:	b0 70       	andi	r27, 0x00	; 0
    1d30:	80 34       	cpi	r24, 0x40	; 64
    1d32:	91 05       	cpc	r25, r1
    1d34:	a1 05       	cpc	r26, r1
    1d36:	b1 05       	cpc	r27, r1
    1d38:	39 f4       	brne	.+14     	; 0x1d48 <__pack_f+0xee>
    1d3a:	27 ff       	sbrs	r18, 7
    1d3c:	09 c0       	rjmp	.+18     	; 0x1d50 <__pack_f+0xf6>
    1d3e:	20 5c       	subi	r18, 0xC0	; 192
    1d40:	3f 4f       	sbci	r19, 0xFF	; 255
    1d42:	4f 4f       	sbci	r20, 0xFF	; 255
    1d44:	5f 4f       	sbci	r21, 0xFF	; 255
    1d46:	04 c0       	rjmp	.+8      	; 0x1d50 <__pack_f+0xf6>
    1d48:	21 5c       	subi	r18, 0xC1	; 193
    1d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4c:	4f 4f       	sbci	r20, 0xFF	; 255
    1d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d50:	e0 e0       	ldi	r30, 0x00	; 0
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	20 30       	cpi	r18, 0x00	; 0
    1d56:	a0 e0       	ldi	r26, 0x00	; 0
    1d58:	3a 07       	cpc	r19, r26
    1d5a:	a0 e0       	ldi	r26, 0x00	; 0
    1d5c:	4a 07       	cpc	r20, r26
    1d5e:	a0 e4       	ldi	r26, 0x40	; 64
    1d60:	5a 07       	cpc	r21, r26
    1d62:	10 f0       	brcs	.+4      	; 0x1d68 <__pack_f+0x10e>
    1d64:	e1 e0       	ldi	r30, 0x01	; 1
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	79 01       	movw	r14, r18
    1d6a:	8a 01       	movw	r16, r20
    1d6c:	27 c0       	rjmp	.+78     	; 0x1dbc <__pack_f+0x162>
    1d6e:	60 38       	cpi	r22, 0x80	; 128
    1d70:	71 05       	cpc	r23, r1
    1d72:	64 f5       	brge	.+88     	; 0x1dcc <__pack_f+0x172>
    1d74:	fb 01       	movw	r30, r22
    1d76:	e1 58       	subi	r30, 0x81	; 129
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	d8 01       	movw	r26, r16
    1d7c:	c7 01       	movw	r24, r14
    1d7e:	8f 77       	andi	r24, 0x7F	; 127
    1d80:	90 70       	andi	r25, 0x00	; 0
    1d82:	a0 70       	andi	r26, 0x00	; 0
    1d84:	b0 70       	andi	r27, 0x00	; 0
    1d86:	80 34       	cpi	r24, 0x40	; 64
    1d88:	91 05       	cpc	r25, r1
    1d8a:	a1 05       	cpc	r26, r1
    1d8c:	b1 05       	cpc	r27, r1
    1d8e:	39 f4       	brne	.+14     	; 0x1d9e <__pack_f+0x144>
    1d90:	e7 fe       	sbrs	r14, 7
    1d92:	0d c0       	rjmp	.+26     	; 0x1dae <__pack_f+0x154>
    1d94:	80 e4       	ldi	r24, 0x40	; 64
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	a0 e0       	ldi	r26, 0x00	; 0
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	04 c0       	rjmp	.+8      	; 0x1da6 <__pack_f+0x14c>
    1d9e:	8f e3       	ldi	r24, 0x3F	; 63
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a0 e0       	ldi	r26, 0x00	; 0
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e8 0e       	add	r14, r24
    1da8:	f9 1e       	adc	r15, r25
    1daa:	0a 1f       	adc	r16, r26
    1dac:	1b 1f       	adc	r17, r27
    1dae:	17 ff       	sbrs	r17, 7
    1db0:	05 c0       	rjmp	.+10     	; 0x1dbc <__pack_f+0x162>
    1db2:	16 95       	lsr	r17
    1db4:	07 95       	ror	r16
    1db6:	f7 94       	ror	r15
    1db8:	e7 94       	ror	r14
    1dba:	31 96       	adiw	r30, 0x01	; 1
    1dbc:	87 e0       	ldi	r24, 0x07	; 7
    1dbe:	16 95       	lsr	r17
    1dc0:	07 95       	ror	r16
    1dc2:	f7 94       	ror	r15
    1dc4:	e7 94       	ror	r14
    1dc6:	8a 95       	dec	r24
    1dc8:	d1 f7       	brne	.-12     	; 0x1dbe <__pack_f+0x164>
    1dca:	05 c0       	rjmp	.+10     	; 0x1dd6 <__pack_f+0x17c>
    1dcc:	ee 24       	eor	r14, r14
    1dce:	ff 24       	eor	r15, r15
    1dd0:	87 01       	movw	r16, r14
    1dd2:	ef ef       	ldi	r30, 0xFF	; 255
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	6e 2f       	mov	r22, r30
    1dd8:	67 95       	ror	r22
    1dda:	66 27       	eor	r22, r22
    1ddc:	67 95       	ror	r22
    1dde:	90 2f       	mov	r25, r16
    1de0:	9f 77       	andi	r25, 0x7F	; 127
    1de2:	d7 94       	ror	r13
    1de4:	dd 24       	eor	r13, r13
    1de6:	d7 94       	ror	r13
    1de8:	8e 2f       	mov	r24, r30
    1dea:	86 95       	lsr	r24
    1dec:	49 2f       	mov	r20, r25
    1dee:	46 2b       	or	r20, r22
    1df0:	58 2f       	mov	r21, r24
    1df2:	5d 29       	or	r21, r13
    1df4:	b7 01       	movw	r22, r14
    1df6:	ca 01       	movw	r24, r20
    1df8:	1f 91       	pop	r17
    1dfa:	0f 91       	pop	r16
    1dfc:	ff 90       	pop	r15
    1dfe:	ef 90       	pop	r14
    1e00:	df 90       	pop	r13
    1e02:	08 95       	ret

00001e04 <__unpack_f>:
    1e04:	fc 01       	movw	r30, r24
    1e06:	db 01       	movw	r26, r22
    1e08:	40 81       	ld	r20, Z
    1e0a:	51 81       	ldd	r21, Z+1	; 0x01
    1e0c:	22 81       	ldd	r18, Z+2	; 0x02
    1e0e:	62 2f       	mov	r22, r18
    1e10:	6f 77       	andi	r22, 0x7F	; 127
    1e12:	70 e0       	ldi	r23, 0x00	; 0
    1e14:	22 1f       	adc	r18, r18
    1e16:	22 27       	eor	r18, r18
    1e18:	22 1f       	adc	r18, r18
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	89 2f       	mov	r24, r25
    1e1e:	88 0f       	add	r24, r24
    1e20:	82 2b       	or	r24, r18
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	99 1f       	adc	r25, r25
    1e28:	99 27       	eor	r25, r25
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	11 96       	adiw	r26, 0x01	; 1
    1e2e:	9c 93       	st	X, r25
    1e30:	11 97       	sbiw	r26, 0x01	; 1
    1e32:	21 15       	cp	r18, r1
    1e34:	31 05       	cpc	r19, r1
    1e36:	a9 f5       	brne	.+106    	; 0x1ea2 <__unpack_f+0x9e>
    1e38:	41 15       	cp	r20, r1
    1e3a:	51 05       	cpc	r21, r1
    1e3c:	61 05       	cpc	r22, r1
    1e3e:	71 05       	cpc	r23, r1
    1e40:	11 f4       	brne	.+4      	; 0x1e46 <__unpack_f+0x42>
    1e42:	82 e0       	ldi	r24, 0x02	; 2
    1e44:	37 c0       	rjmp	.+110    	; 0x1eb4 <__unpack_f+0xb0>
    1e46:	82 e8       	ldi	r24, 0x82	; 130
    1e48:	9f ef       	ldi	r25, 0xFF	; 255
    1e4a:	13 96       	adiw	r26, 0x03	; 3
    1e4c:	9c 93       	st	X, r25
    1e4e:	8e 93       	st	-X, r24
    1e50:	12 97       	sbiw	r26, 0x02	; 2
    1e52:	9a 01       	movw	r18, r20
    1e54:	ab 01       	movw	r20, r22
    1e56:	67 e0       	ldi	r22, 0x07	; 7
    1e58:	22 0f       	add	r18, r18
    1e5a:	33 1f       	adc	r19, r19
    1e5c:	44 1f       	adc	r20, r20
    1e5e:	55 1f       	adc	r21, r21
    1e60:	6a 95       	dec	r22
    1e62:	d1 f7       	brne	.-12     	; 0x1e58 <__unpack_f+0x54>
    1e64:	83 e0       	ldi	r24, 0x03	; 3
    1e66:	8c 93       	st	X, r24
    1e68:	0d c0       	rjmp	.+26     	; 0x1e84 <__unpack_f+0x80>
    1e6a:	22 0f       	add	r18, r18
    1e6c:	33 1f       	adc	r19, r19
    1e6e:	44 1f       	adc	r20, r20
    1e70:	55 1f       	adc	r21, r21
    1e72:	12 96       	adiw	r26, 0x02	; 2
    1e74:	8d 91       	ld	r24, X+
    1e76:	9c 91       	ld	r25, X
    1e78:	13 97       	sbiw	r26, 0x03	; 3
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	13 96       	adiw	r26, 0x03	; 3
    1e7e:	9c 93       	st	X, r25
    1e80:	8e 93       	st	-X, r24
    1e82:	12 97       	sbiw	r26, 0x02	; 2
    1e84:	20 30       	cpi	r18, 0x00	; 0
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	38 07       	cpc	r19, r24
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	48 07       	cpc	r20, r24
    1e8e:	80 e4       	ldi	r24, 0x40	; 64
    1e90:	58 07       	cpc	r21, r24
    1e92:	58 f3       	brcs	.-42     	; 0x1e6a <__unpack_f+0x66>
    1e94:	14 96       	adiw	r26, 0x04	; 4
    1e96:	2d 93       	st	X+, r18
    1e98:	3d 93       	st	X+, r19
    1e9a:	4d 93       	st	X+, r20
    1e9c:	5c 93       	st	X, r21
    1e9e:	17 97       	sbiw	r26, 0x07	; 7
    1ea0:	08 95       	ret
    1ea2:	2f 3f       	cpi	r18, 0xFF	; 255
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	79 f4       	brne	.+30     	; 0x1ec6 <__unpack_f+0xc2>
    1ea8:	41 15       	cp	r20, r1
    1eaa:	51 05       	cpc	r21, r1
    1eac:	61 05       	cpc	r22, r1
    1eae:	71 05       	cpc	r23, r1
    1eb0:	19 f4       	brne	.+6      	; 0x1eb8 <__unpack_f+0xb4>
    1eb2:	84 e0       	ldi	r24, 0x04	; 4
    1eb4:	8c 93       	st	X, r24
    1eb6:	08 95       	ret
    1eb8:	64 ff       	sbrs	r22, 4
    1eba:	03 c0       	rjmp	.+6      	; 0x1ec2 <__unpack_f+0xbe>
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	8c 93       	st	X, r24
    1ec0:	12 c0       	rjmp	.+36     	; 0x1ee6 <__unpack_f+0xe2>
    1ec2:	1c 92       	st	X, r1
    1ec4:	10 c0       	rjmp	.+32     	; 0x1ee6 <__unpack_f+0xe2>
    1ec6:	2f 57       	subi	r18, 0x7F	; 127
    1ec8:	30 40       	sbci	r19, 0x00	; 0
    1eca:	13 96       	adiw	r26, 0x03	; 3
    1ecc:	3c 93       	st	X, r19
    1ece:	2e 93       	st	-X, r18
    1ed0:	12 97       	sbiw	r26, 0x02	; 2
    1ed2:	83 e0       	ldi	r24, 0x03	; 3
    1ed4:	8c 93       	st	X, r24
    1ed6:	87 e0       	ldi	r24, 0x07	; 7
    1ed8:	44 0f       	add	r20, r20
    1eda:	55 1f       	adc	r21, r21
    1edc:	66 1f       	adc	r22, r22
    1ede:	77 1f       	adc	r23, r23
    1ee0:	8a 95       	dec	r24
    1ee2:	d1 f7       	brne	.-12     	; 0x1ed8 <__unpack_f+0xd4>
    1ee4:	70 64       	ori	r23, 0x40	; 64
    1ee6:	14 96       	adiw	r26, 0x04	; 4
    1ee8:	4d 93       	st	X+, r20
    1eea:	5d 93       	st	X+, r21
    1eec:	6d 93       	st	X+, r22
    1eee:	7c 93       	st	X, r23
    1ef0:	17 97       	sbiw	r26, 0x07	; 7
    1ef2:	08 95       	ret

00001ef4 <__fpcmp_parts_f>:
    1ef4:	1f 93       	push	r17
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	fb 01       	movw	r30, r22
    1efa:	9c 91       	ld	r25, X
    1efc:	92 30       	cpi	r25, 0x02	; 2
    1efe:	08 f4       	brcc	.+2      	; 0x1f02 <__fpcmp_parts_f+0xe>
    1f00:	47 c0       	rjmp	.+142    	; 0x1f90 <__fpcmp_parts_f+0x9c>
    1f02:	80 81       	ld	r24, Z
    1f04:	82 30       	cpi	r24, 0x02	; 2
    1f06:	08 f4       	brcc	.+2      	; 0x1f0a <__fpcmp_parts_f+0x16>
    1f08:	43 c0       	rjmp	.+134    	; 0x1f90 <__fpcmp_parts_f+0x9c>
    1f0a:	94 30       	cpi	r25, 0x04	; 4
    1f0c:	51 f4       	brne	.+20     	; 0x1f22 <__fpcmp_parts_f+0x2e>
    1f0e:	11 96       	adiw	r26, 0x01	; 1
    1f10:	1c 91       	ld	r17, X
    1f12:	84 30       	cpi	r24, 0x04	; 4
    1f14:	99 f5       	brne	.+102    	; 0x1f7c <__fpcmp_parts_f+0x88>
    1f16:	81 81       	ldd	r24, Z+1	; 0x01
    1f18:	68 2f       	mov	r22, r24
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	61 1b       	sub	r22, r17
    1f1e:	71 09       	sbc	r23, r1
    1f20:	3f c0       	rjmp	.+126    	; 0x1fa0 <__fpcmp_parts_f+0xac>
    1f22:	84 30       	cpi	r24, 0x04	; 4
    1f24:	21 f0       	breq	.+8      	; 0x1f2e <__fpcmp_parts_f+0x3a>
    1f26:	92 30       	cpi	r25, 0x02	; 2
    1f28:	31 f4       	brne	.+12     	; 0x1f36 <__fpcmp_parts_f+0x42>
    1f2a:	82 30       	cpi	r24, 0x02	; 2
    1f2c:	b9 f1       	breq	.+110    	; 0x1f9c <__fpcmp_parts_f+0xa8>
    1f2e:	81 81       	ldd	r24, Z+1	; 0x01
    1f30:	88 23       	and	r24, r24
    1f32:	89 f1       	breq	.+98     	; 0x1f96 <__fpcmp_parts_f+0xa2>
    1f34:	2d c0       	rjmp	.+90     	; 0x1f90 <__fpcmp_parts_f+0x9c>
    1f36:	11 96       	adiw	r26, 0x01	; 1
    1f38:	1c 91       	ld	r17, X
    1f3a:	11 97       	sbiw	r26, 0x01	; 1
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	f1 f0       	breq	.+60     	; 0x1f7c <__fpcmp_parts_f+0x88>
    1f40:	81 81       	ldd	r24, Z+1	; 0x01
    1f42:	18 17       	cp	r17, r24
    1f44:	d9 f4       	brne	.+54     	; 0x1f7c <__fpcmp_parts_f+0x88>
    1f46:	12 96       	adiw	r26, 0x02	; 2
    1f48:	2d 91       	ld	r18, X+
    1f4a:	3c 91       	ld	r19, X
    1f4c:	13 97       	sbiw	r26, 0x03	; 3
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	82 17       	cp	r24, r18
    1f54:	93 07       	cpc	r25, r19
    1f56:	94 f0       	brlt	.+36     	; 0x1f7c <__fpcmp_parts_f+0x88>
    1f58:	28 17       	cp	r18, r24
    1f5a:	39 07       	cpc	r19, r25
    1f5c:	bc f0       	brlt	.+46     	; 0x1f8c <__fpcmp_parts_f+0x98>
    1f5e:	14 96       	adiw	r26, 0x04	; 4
    1f60:	8d 91       	ld	r24, X+
    1f62:	9d 91       	ld	r25, X+
    1f64:	0d 90       	ld	r0, X+
    1f66:	bc 91       	ld	r27, X
    1f68:	a0 2d       	mov	r26, r0
    1f6a:	24 81       	ldd	r18, Z+4	; 0x04
    1f6c:	35 81       	ldd	r19, Z+5	; 0x05
    1f6e:	46 81       	ldd	r20, Z+6	; 0x06
    1f70:	57 81       	ldd	r21, Z+7	; 0x07
    1f72:	28 17       	cp	r18, r24
    1f74:	39 07       	cpc	r19, r25
    1f76:	4a 07       	cpc	r20, r26
    1f78:	5b 07       	cpc	r21, r27
    1f7a:	18 f4       	brcc	.+6      	; 0x1f82 <__fpcmp_parts_f+0x8e>
    1f7c:	11 23       	and	r17, r17
    1f7e:	41 f0       	breq	.+16     	; 0x1f90 <__fpcmp_parts_f+0x9c>
    1f80:	0a c0       	rjmp	.+20     	; 0x1f96 <__fpcmp_parts_f+0xa2>
    1f82:	82 17       	cp	r24, r18
    1f84:	93 07       	cpc	r25, r19
    1f86:	a4 07       	cpc	r26, r20
    1f88:	b5 07       	cpc	r27, r21
    1f8a:	40 f4       	brcc	.+16     	; 0x1f9c <__fpcmp_parts_f+0xa8>
    1f8c:	11 23       	and	r17, r17
    1f8e:	19 f0       	breq	.+6      	; 0x1f96 <__fpcmp_parts_f+0xa2>
    1f90:	61 e0       	ldi	r22, 0x01	; 1
    1f92:	70 e0       	ldi	r23, 0x00	; 0
    1f94:	05 c0       	rjmp	.+10     	; 0x1fa0 <__fpcmp_parts_f+0xac>
    1f96:	6f ef       	ldi	r22, 0xFF	; 255
    1f98:	7f ef       	ldi	r23, 0xFF	; 255
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <__fpcmp_parts_f+0xac>
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	1f 91       	pop	r17
    1fa4:	08 95       	ret

00001fa6 <__udivmodhi4>:
    1fa6:	aa 1b       	sub	r26, r26
    1fa8:	bb 1b       	sub	r27, r27
    1faa:	51 e1       	ldi	r21, 0x11	; 17
    1fac:	07 c0       	rjmp	.+14     	; 0x1fbc <__udivmodhi4_ep>

00001fae <__udivmodhi4_loop>:
    1fae:	aa 1f       	adc	r26, r26
    1fb0:	bb 1f       	adc	r27, r27
    1fb2:	a6 17       	cp	r26, r22
    1fb4:	b7 07       	cpc	r27, r23
    1fb6:	10 f0       	brcs	.+4      	; 0x1fbc <__udivmodhi4_ep>
    1fb8:	a6 1b       	sub	r26, r22
    1fba:	b7 0b       	sbc	r27, r23

00001fbc <__udivmodhi4_ep>:
    1fbc:	88 1f       	adc	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	5a 95       	dec	r21
    1fc2:	a9 f7       	brne	.-22     	; 0x1fae <__udivmodhi4_loop>
    1fc4:	80 95       	com	r24
    1fc6:	90 95       	com	r25
    1fc8:	bc 01       	movw	r22, r24
    1fca:	cd 01       	movw	r24, r26
    1fcc:	08 95       	ret

00001fce <__divmodhi4>:
    1fce:	97 fb       	bst	r25, 7
    1fd0:	09 2e       	mov	r0, r25
    1fd2:	07 26       	eor	r0, r23
    1fd4:	0a d0       	rcall	.+20     	; 0x1fea <__divmodhi4_neg1>
    1fd6:	77 fd       	sbrc	r23, 7
    1fd8:	04 d0       	rcall	.+8      	; 0x1fe2 <__divmodhi4_neg2>
    1fda:	e5 df       	rcall	.-54     	; 0x1fa6 <__udivmodhi4>
    1fdc:	06 d0       	rcall	.+12     	; 0x1fea <__divmodhi4_neg1>
    1fde:	00 20       	and	r0, r0
    1fe0:	1a f4       	brpl	.+6      	; 0x1fe8 <__divmodhi4_exit>

00001fe2 <__divmodhi4_neg2>:
    1fe2:	70 95       	com	r23
    1fe4:	61 95       	neg	r22
    1fe6:	7f 4f       	sbci	r23, 0xFF	; 255

00001fe8 <__divmodhi4_exit>:
    1fe8:	08 95       	ret

00001fea <__divmodhi4_neg1>:
    1fea:	f6 f7       	brtc	.-4      	; 0x1fe8 <__divmodhi4_exit>
    1fec:	90 95       	com	r25
    1fee:	81 95       	neg	r24
    1ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff2:	08 95       	ret

00001ff4 <__prologue_saves__>:
    1ff4:	2f 92       	push	r2
    1ff6:	3f 92       	push	r3
    1ff8:	4f 92       	push	r4
    1ffa:	5f 92       	push	r5
    1ffc:	6f 92       	push	r6
    1ffe:	7f 92       	push	r7
    2000:	8f 92       	push	r8
    2002:	9f 92       	push	r9
    2004:	af 92       	push	r10
    2006:	bf 92       	push	r11
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	ca 1b       	sub	r28, r26
    201e:	db 0b       	sbc	r29, r27
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	cd bf       	out	0x3d, r28	; 61
    202a:	09 94       	ijmp

0000202c <__epilogue_restores__>:
    202c:	2a 88       	ldd	r2, Y+18	; 0x12
    202e:	39 88       	ldd	r3, Y+17	; 0x11
    2030:	48 88       	ldd	r4, Y+16	; 0x10
    2032:	5f 84       	ldd	r5, Y+15	; 0x0f
    2034:	6e 84       	ldd	r6, Y+14	; 0x0e
    2036:	7d 84       	ldd	r7, Y+13	; 0x0d
    2038:	8c 84       	ldd	r8, Y+12	; 0x0c
    203a:	9b 84       	ldd	r9, Y+11	; 0x0b
    203c:	aa 84       	ldd	r10, Y+10	; 0x0a
    203e:	b9 84       	ldd	r11, Y+9	; 0x09
    2040:	c8 84       	ldd	r12, Y+8	; 0x08
    2042:	df 80       	ldd	r13, Y+7	; 0x07
    2044:	ee 80       	ldd	r14, Y+6	; 0x06
    2046:	fd 80       	ldd	r15, Y+5	; 0x05
    2048:	0c 81       	ldd	r16, Y+4	; 0x04
    204a:	1b 81       	ldd	r17, Y+3	; 0x03
    204c:	aa 81       	ldd	r26, Y+2	; 0x02
    204e:	b9 81       	ldd	r27, Y+1	; 0x01
    2050:	ce 0f       	add	r28, r30
    2052:	d1 1d       	adc	r29, r1
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	ed 01       	movw	r28, r26
    2060:	08 95       	ret

00002062 <_exit>:
    2062:	f8 94       	cli

00002064 <__stop_program>:
    2064:	ff cf       	rjmp	.-2      	; 0x2064 <__stop_program>
